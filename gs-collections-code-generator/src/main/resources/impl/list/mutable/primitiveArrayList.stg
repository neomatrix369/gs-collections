import "copyright.stg"
import "primitiveEquals.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"

targetPath() ::= "com/gs/collections/impl/list/mutable/primitive"

fileName(primitive) ::= "<primitive.name>ArrayList"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyright()>

package com.gs.collections.impl.list.mutable.primitive;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.Arrays;
import java.util.NoSuchElementException;

import com.gs.collections.api.<name>Iterable;
import com.gs.collections.api.Lazy<name>Iterable;
import com.gs.collections.api.RichIterable;
import com.gs.collections.api.bag.primitive.Mutable<name>Bag;
import com.gs.collections.api.block.function.primitive.Object<name>IntToObjectFunction;
import com.gs.collections.api.block.function.primitive.Object<name>ToObjectFunction;
import com.gs.collections.api.block.function.primitive.<name>ToObjectFunction;
import com.gs.collections.api.block.predicate.primitive.<name>Predicate;
import com.gs.collections.api.block.procedure.primitive.<name>IntProcedure;
import com.gs.collections.api.block.procedure.primitive.<name>Procedure;
import com.gs.collections.api.iterator.<name>Iterator;
import com.gs.collections.api.list.MutableList;
import com.gs.collections.api.list.primitive.<name>List;
import com.gs.collections.api.list.primitive.Immutable<name>List;
import com.gs.collections.api.list.primitive.Mutable<name>List;
import com.gs.collections.api.set.primitive.Mutable<name>Set;
import com.gs.collections.impl.bag.mutable.primitive.<name>HashBag;
import com.gs.collections.impl.factory.primitive.<name>Lists;
import com.gs.collections.impl.lazy.primitive.Lazy<name>IterableAdapter;
import com.gs.collections.impl.list.mutable.FastList;
import com.gs.collections.impl.set.mutable.primitive.<name>HashSet;
import net.jcip.annotations.NotThreadSafe;

/**
 * <name>ArrayList is similar to {@link FastList}, and is memory-optimized for <type> primitives.
 * This file was automatically generated from template file primitiveArrayList.stg.
 *
 * @since 3.0.
 */
@NotThreadSafe
public final class <name>ArrayList
        implements Mutable<name>List, Externalizable
{
    private static final long serialVersionUID = 1L;
    private static final <type>[] DEFAULT_SIZED_EMPTY_ARRAY = {};
    private static final <type>[] ZERO_SIZED_ARRAY = {};
    private static final int MAXIMUM_ARRAY_SIZE = Integer.MAX_VALUE - 8;
    private int size;
    private transient <type>[] items = DEFAULT_SIZED_EMPTY_ARRAY;

    public <name>ArrayList()
    {
    }

    public <name>ArrayList(int initialCapacity)
    {
        this.items = initialCapacity == 0 ? ZERO_SIZED_ARRAY : new <type>[initialCapacity];
    }

    public <name>ArrayList(<type>... array)
    {
        this.size = array.length;
        this.items = array;
    }

    /**
     * Creates a new list using the passed {@code elements} argument as the backing store.
     * \<p/>
     * !!! WARNING: This method uses the passed in array, so can be very unsafe if the original
     * array is held onto anywhere else. !!!
     */
    public static <name>ArrayList newListWith(<type>... elements)
    {
        return new <name>ArrayList(elements);
    }

    public static <name>ArrayList newList(<name>Iterable source)
    {
        return <name>ArrayList.newListWith(source.toArray());
    }

    public static <name>ArrayList newWithNValues(int size, <type> value)
    {
        <name>ArrayList newList = new <name>ArrayList(size);
        for (int i = 0; i \< size; i++)
        {
            newList.add(value);
        }
        return newList;
    }

    public int size()
    {
        return this.size;
    }

    public boolean isEmpty()
    {
        return this.size == 0;
    }

    public boolean notEmpty()
    {
        return this.size > 0;
    }

    public void clear()
    {
        Arrays.fill(this.items, <(zero.(type))>);
        this.size = 0;
    }

    public boolean contains(<type> value)
    {
        for (int i = 0; i \< this.size; i++)
        {
            if (<(equals.(type))("this.items[i]", "value")>)
            {
                return true;
            }
        }
        return false;
    }

    public boolean containsAll(<type>... source)
    {
        for (<type> value : source)
        {
            if (!this.contains(value))
            {
                return false;
            }
        }
        return true;
    }

    public boolean containsAll(<name>Iterable source)
    {
        for (<name>Iterator iterator = source.<type>Iterator(); iterator.hasNext(); )
        {
            if (!this.contains(iterator.next()))
            {
                return false;
            }
        }
        return true;
    }

    public <type> get(int index)
    {
        if (index \< this.size)
        {
            return this.items[index];
        }
        throw this.newIndexOutOfBoundsException(index);
    }

    private IndexOutOfBoundsException newIndexOutOfBoundsException(int index)
    {
        return new IndexOutOfBoundsException("Index: " + index + " Size: " + this.size);
    }

    public <type> getFirst()
    {
        this.checkEmpty();
        return this.items[0];
    }

    public <type> getLast()
    {
        this.checkEmpty();
        return this.items[this.size() - 1];
    }

    private void checkEmpty()
    {
        if (this.isEmpty())
        {
            throw this.newIndexOutOfBoundsException(0);
        }
    }

    public int indexOf(<type> value)
    {
        for (int i = 0; i \< this.size; i++)
        {
            if (<(equals.(type))("this.items[i]", "value")>)
            {
                return i;
            }
        }
        return -1;
    }

    public int lastIndexOf(<type> value)
    {
        for (int i = this.size - 1; i >= 0; i--)
        {
            if (<(equals.(type))("this.items[i]", "value")>)
            {
                return i;
            }
        }
        return -1;
    }

    public void trimToSize()
    {
        if (this.size \< this.items.length)
        {
            this.transferItemsToNewArrayWithCapacity(this.size);
        }
    }

    private void transferItemsToNewArrayWithCapacity(int newCapacity)
    {
        this.items = this.copyItemsWithNewCapacity(newCapacity);
    }

    private <type>[] copyItemsWithNewCapacity(int newCapacity)
    {
        <type>[] newItems = new <type>[newCapacity];
        System.arraycopy(this.items, 0, newItems, 0, Math.min(this.size, newCapacity));
        return newItems;
    }

    private int sizePlusFiftyPercent(int oldSize)
    {
        int result = oldSize + (oldSize >\> 1) + 1;
        return result \< oldSize ? MAXIMUM_ARRAY_SIZE : result;
    }

    public void ensureCapacity(int minCapacity)
    {
        int oldCapacity = this.items.length;
        if (minCapacity > oldCapacity)
        {
            int newCapacity = Math.max(this.sizePlusFiftyPercent(oldCapacity), minCapacity);
            this.transferItemsToNewArrayWithCapacity(newCapacity);
        }
    }

    private void ensureCapacityForAdd()
    {
        if (this.items == DEFAULT_SIZED_EMPTY_ARRAY)
        {
            this.items = new <type>[10];
        }
        else
        {
            this.transferItemsToNewArrayWithCapacity(this.sizePlusFiftyPercent(this.size));
        }
    }

    public boolean add(<type> newItem)
    {
        if (this.items.length == this.size)
        {
            this.ensureCapacityForAdd();
        }
        this.items[this.size] = newItem;
        this.size++;
        return true;
    }

    public boolean addAll(<type>... source)
    {
        if (source.length \< 1)
        {
            return false;
        }
        int sourceSize = source.length;
        int newSize = this.size + sourceSize;
        this.ensureCapacity(newSize);
        System.arraycopy(source, 0, this.items, this.size, sourceSize);
        this.size = newSize;
        return true;
    }

    public boolean addAll(<name>Iterable source)
    {
        return this.addAll(source.toArray());
    }

    private void throwOutOfBounds(int index)
    {
        throw this.newIndexOutOfBoundsException(index);
    }

    public void addAtIndex(int index, <type> element)
    {
        if (index > -1 && index \< this.size)
        {
            this.addAtIndexLessThanSize(index, element);
        }
        else if (index == this.size)
        {
            this.add(element);
        }
        else
        {
            this.throwOutOfBounds(index);
        }
    }

    private void addAtIndexLessThanSize(int index, <type> element)
    {
        int oldSize = this.size;
        this.size++;
        if (this.items.length == oldSize)
        {
            <type>[] newItems = new <type>[this.sizePlusFiftyPercent(oldSize)];
            if (index > 0)
            {
                System.arraycopy(this.items, 0, newItems, 0, index);
            }
            System.arraycopy(this.items, index, newItems, index + 1, oldSize - index);
            this.items = newItems;
        }
        else
        {
            System.arraycopy(this.items, index, this.items, index + 1, oldSize - index);
        }
        this.items[index] = element;
    }

    public boolean addAllAtIndex(int index, <type>... source)
    {
        if (index > this.size || index \< 0)
        {
            this.throwOutOfBounds(index);
        }
        if (source.length == 0)
        {
            return false;
        }
        int sourceSize = source.length;
        int newSize = this.size + sourceSize;
        this.ensureCapacity(newSize);
        this.shiftElementsAtIndex(index, sourceSize);
        System.arraycopy(source, 0, this.items, index, sourceSize);
        this.size = newSize;
        return true;
    }

    public boolean addAllAtIndex(int index, <name>Iterable source)
    {
        return this.addAllAtIndex(index, source.toArray());
    }

    private void shiftElementsAtIndex(int index, int sourceSize)
    {
        int numberToMove = this.size - index;
        if (numberToMove > 0)
        {
            System.arraycopy(this.items, index, this.items, index + sourceSize, numberToMove);
        }
    }

    public boolean remove(<type> value)
    {
        int index = this.indexOf(value);
        if (index >= 0)
        {
            this.removeAtIndex(index);
            return true;
        }
        return false;
    }

    public boolean removeAll(<name>Iterable source)
    {
        boolean modified = false;
        for (int index = 0; index \< this.size; index++)
        {
            if (source.contains(this.get(index)))
            {
                this.removeAtIndex(index);
                index--;
                modified = true;
            }
        }
        return modified;
    }

    public boolean removeAll(<type>... source)
    {
        <name>HashSet set = <name>HashSet.newSetWith(source);
        <type>[] newItems = new <type>[this.size];
        int count = 0;
        int oldSize = this.size;
        for (int index = 0; index \< this.size; index++)
        {
            if (!set.contains(this.items[index]))
            {
                newItems[count] = this.items[index];
                count++;
            }
        }
        this.items = newItems;
        this.size = count;
        return oldSize != this.size;
    }

    public <type> removeAtIndex(int index)
    {
        <type> previous = this.get(index);
        int totalOffset = this.size - index - 1;
        if (totalOffset > 0)
        {
            System.arraycopy(this.items, index + 1, this.items, index, totalOffset);
        }
        --this.size;
        this.items[this.size] = <zero.(type)>;
        return previous;
    }

    public <type> set(int index, <type> element)
    {
        <type> previous = this.get(index);
        this.items[index] = element;
        return previous;
    }

    public <name>ArrayList with(<type> element)
    {
        this.add(element);
        return this;
    }

    public <name>ArrayList without(<type> element)
    {
        this.remove(element);
        return this;
    }

    public <name>ArrayList withAll(<name>Iterable elements)
    {
        this.addAll(elements.toArray());
        return this;
    }

    public <name>ArrayList withoutAll(<name>Iterable elements)
    {
        this.removeAll(elements);
        return this;
    }

    public <name>ArrayList with(<type> element1, <type> element2)
    {
        this.add(element1);
        this.add(element2);
        return this;
    }

    public <name>ArrayList with(<type> element1, <type> element2, <type> element3)
    {
        this.add(element1);
        this.add(element2);
        this.add(element3);
        return this;
    }

    public <name>ArrayList with(<type> element1, <type> element2, <type> element3, <type>... elements)
    {
        this.add(element1);
        this.add(element2);
        this.add(element3);
        return this.withArrayCopy(elements, 0, elements.length);
    }

    private <name>ArrayList withArrayCopy(<type>[] elements, int begin, int length)
    {
        this.ensureCapacity(this.size + length);
        System.arraycopy(elements, begin, this.items, this.size, length);
        this.size += length;
        return this;
    }

    public <name>Iterator <type>Iterator()
    {
        return new Internal<name>Iterator();
    }

    public void forEach(<name>Procedure procedure)
    {
        for (int i = 0; i \< this.size; i++)
        {
            procedure.value(this.items[i]);
        }
    }

    public void forEachWithIndex(<name>IntProcedure procedure)
    {
        for (int i = 0; i \< this.size; i++)
        {
            procedure.value(this.items[i], i);
        }
    }

    public \<T> T injectInto(T injectedValue, Object<name>ToObjectFunction\<? super T, ? extends T> function)
    {
        T result = injectedValue;
        for (int i = 0; i \< this.size; i++)
        {
            result = function.valueOf(result, this.items[i]);
        }
        return result;
    }

    public \<T> T injectIntoWithIndex(T injectedValue, Object<name>IntToObjectFunction\<? super T, ? extends T> function)
    {
        T result = injectedValue;
        for (int i = 0; i \< this.size; i++)
        {
            result = function.valueOf(result, this.items[i], i);
        }
        return result;
    }

    public int count(<name>Predicate predicate)
    {
        int count = 0;
        for (int i = 0; i \< this.size; i++)
        {
            if (predicate.accept(this.items[i]))
            {
                count++;
            }
        }
        return count;
    }

    public boolean anySatisfy(<name>Predicate predicate)
    {
        for (int i = 0; i \< this.size; i++)
        {
            if (predicate.accept(this.items[i]))
            {
                return true;
            }
        }
        return false;
    }

    public boolean allSatisfy(<name>Predicate predicate)
    {
        for (int i = 0; i \< this.size; i++)
        {
            if (!predicate.accept(this.items[i]))
            {
                return false;
            }
        }
        return true;
    }

    public boolean noneSatisfy(<name>Predicate predicate)
    {
        for (int i = 0; i \< this.size; i++)
        {
            if (predicate.accept(this.items[i]))
            {
                return false;
            }
        }
        return true;
    }

    public <name>ArrayList select(<name>Predicate predicate)
    {
        <name>ArrayList result = new <name>ArrayList();
        for (int i = 0; i \< this.size; i++)
        {
            <type> item = this.items[i];
            if (predicate.accept(item))
            {
                result.add(item);
            }
        }
        return result;
    }

    public <name>ArrayList reject(<name>Predicate predicate)
    {
        <name>ArrayList result = new <name>ArrayList();
        for (int i = 0; i \< this.size; i++)
        {
            <type> item = this.items[i];
            if (!predicate.accept(item))
            {
                result.add(item);
            }
        }
        return result;
    }

    public <type> detectIfNone(<name>Predicate predicate, <type> ifNone)
    {
        for (int i = 0; i \< this.size; i++)
        {
            <type> item = this.items[i];
            if (predicate.accept(item))
            {
                return item;
            }
        }
        return ifNone;
    }

    public \<V> MutableList\<V> collect(<name>ToObjectFunction\<? extends V> function)
    {
        FastList\<V> target = FastList.newList(this.size);
        for (int i = 0; i \< this.size; i++)
        {
            target.add(function.valueOf(this.items[i]));
        }
        return target;
    }

    public <type> max()
    {
        if (this.isEmpty())
        {
            throw new NoSuchElementException();
        }
        <type> max = this.items[0];
        for (int i = 1; i \< this.size; i++)
        {
            <type> value = this.items[i];
            if (<(lessThan.(type))("max", "value")>)
            {
                max = value;
            }
        }
        return max;
    }

    public <type> min()
    {
        if (this.isEmpty())
        {
            throw new NoSuchElementException();
        }
        <type> min = this.items[0];
        for (int i = 1; i \< this.size; i++)
        {
            <type> value = this.items[i];
            if (<(lessThan.(type))("value", "min")>)
            {
                min = value;
            }
        }
        return min;
    }

    public <type> minIfEmpty(<type> defaultValue)
    {
        if (this.isEmpty())
        {
            return defaultValue;
        }
        return this.min();
    }

    public <type> maxIfEmpty(<type> defaultValue)
    {
        if (this.isEmpty())
        {
            return defaultValue;
        }
        return this.max();
    }

    public <wideType.(type)> sum()
    {
        <wideType.(type)> result = <wideZero.(type)>;
        for (int i = 0; i \< this.size; i++)
        {
            result += this.items[i];
        }
        return result;
    }

    public <wideType.(type)> dotProduct(<name>List list)
    {
        if (this.size != list.size())
        {
            throw new IllegalArgumentException("Lists used in dotProduct must be the same size");
        }
        <wideType.(type)> sum = <wideZero.(type)>;
        for (int i = 0; i \< this.size; i++)
        {
            sum += <castWideType.(type)>this.items[i] * list.get(i);
        }
        return sum;
    }

    public double average()
    {
        if (this.isEmpty())
        {
            throw new ArithmeticException();
        }
        return <castSum.(type)>this.sum() / (double) this.size();
    }

    public double median()
    {
        if (this.isEmpty())
        {
            throw new ArithmeticException();
        }
        <type>[] sortedArray = this.toSortedArray();
        int middleIndex = sortedArray.length >\> 1;
        if (sortedArray.length > 1 && (sortedArray.length & 1) == 0)
        {
            <type> first = sortedArray[middleIndex];
            <type> second = sortedArray[middleIndex - 1];
            return (<castDouble.(type)>first + <castDouble.(type)>second) / 2.0;
        }
        return <castDouble.(type)>sortedArray[middleIndex];
    }

    public <type>[] toArray()
    {
        <type>[] newItems = new <type>[this.size];
        System.arraycopy(this.items, 0, newItems, 0, this.size);
        return newItems;
    }

    public <type>[] toSortedArray()
    {
        <type>[] array = this.toArray();
        Arrays.sort(array);
        return array;
    }

    @Override
    public boolean equals(Object otherList)
    {
        if (otherList == this)
        {
            return true;
        }
        if (!(otherList instanceof <name>List))
        {
            return false;
        }
        <name>List list = (<name>List) otherList;
        if (this.size != list.size())
        {
            return false;
        }
        for (int i = 0; i \< this.size; i++)
        {
            if (<(notEquals.(type))("this.items[i]", "list.get(i)")>)
            {
                return false;
            }
        }
        return true;
    }

    @Override
    public int hashCode()
    {
        int hashCode = 1;
        for (int i = 0; i \< this.size; i++)
        {
            <type> item = this.items[i];
            hashCode = 31 * hashCode + <(hashCode.(type))("item")>;
        }
        return hashCode;
    }

    @Override
    public String toString()
    {
        return this.makeString("[", ", ", "]");
    }

    public String makeString()
    {
        return this.makeString(", ");
    }

    public String makeString(String separator)
    {
        return this.makeString("", separator, "");
    }

    public String makeString(String start, String separator, String end)
    {
        Appendable stringBuilder = new StringBuilder();
        this.appendString(stringBuilder, start, separator, end);
        return stringBuilder.toString();
    }

    public void appendString(Appendable appendable)
    {
        this.appendString(appendable, ", ");
    }

    public void appendString(Appendable appendable, String separator)
    {
        this.appendString(appendable, "", separator, "");
    }

    public void appendString(
            Appendable appendable,
            String start,
            String separator,
            String end)
    {
        try
        {
            appendable.append(start);
            for (int i = 0; i \< this.size; i++)
            {
                if (i > 0)
                {
                    appendable.append(separator);
                }
                <type> value = this.items[i];
                appendable.append(String.valueOf(value));
            }
            appendable.append(end);
        }
        catch (IOException e)
        {
            throw new RuntimeException(e);
        }
    }

    public Mutable<name>List toList()
    {
        return <name>ArrayList.newList(this);
    }

    public Mutable<name>List toSortedList()
    {
        return <name>ArrayList.newList(this).sortThis();
    }

    public Mutable<name>Set toSet()
    {
        return <name>HashSet.newSet(this);
    }

    public Mutable<name>Bag toBag()
    {
        return <name>HashBag.newBag(this);
    }

    public Lazy<name>Iterable asLazy()
    {
        return new Lazy<name>IterableAdapter(this);
    }

    public Mutable<name>List asUnmodifiable()
    {
        return new Unmodifiable<name>List(this);
    }

    public Mutable<name>List asSynchronized()
    {
        return new Synchronized<name>List(this);
    }

    public Immutable<name>List toImmutable()
    {
        if (this.items.length == 0)
        {
            return <name>Lists.immutable.with();
        }
        if (this.items.length == 1)
        {
            return <name>Lists.immutable.with(this.items[0]);
        }
        return <name>Lists.immutable.with(this.toArray());
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        out.writeInt(this.size);
        for (int i = 0; i \< this.size; i++)
        {
            out.write<name>(this.items[i]);
        }
    }

    public void readExternal(ObjectInput in) throws IOException
    {
        this.size = in.readInt();
        this.items = new <type>[this.size];
        for (int i = 0; i \< this.size; i++)
        {
            this.items[i] = in.read<name>();
        }
    }

    public <name>Iterable asReversed()
    {
        return new Reverse<name>Iterable();
    }

    public <name>ArrayList reverseThis()
    {
        int size = this.items.length;
        int endIndex = size - 1;
        for (int i = 0; i \< size / 2; i++)
        {
            <type> tempSwapValue = this.items[i];
            this.items[i] = this.items[endIndex - i];
            this.items[endIndex - i] = tempSwapValue;
        }
        return this;
    }

    public <name>ArrayList sortThis()
    {
        Arrays.sort(this.items, 0, this.items.length);
        return this;
    }

    public <name>ArrayList toReversed()
    {
        return <name>ArrayList.newList(this.asReversed());
    }

    private class Internal<name>Iterator implements <name>Iterator
    {
        /**
         * Index of element to be returned by subsequent call to next.
         */
        private int currentIndex;

        public boolean hasNext()
        {
            return this.currentIndex != <name>ArrayList.this.size();
        }

        public <type> next()
        {
            if (!this.hasNext())
            {
                throw new NoSuchElementException();
            }
            <type> next = <name>ArrayList.this.items[this.currentIndex];
            this.currentIndex++;
            return next;
        }
    }

    private class Reverse<name>Iterable implements <name>Iterable
    {
        public <name>Iterator <type>Iterator()
        {
            return new Reverse<name>Iterator();
        }

        public void forEach(<name>Procedure procedure)
        {
            <name>Iterator iterator = this.<type>Iterator();
            while (iterator.hasNext())
            {
                procedure.value(iterator.next());
            }
        }

        public int count(<name>Predicate predicate)
        {
            int count = 0;
            <name>Iterator iterator = this.<type>Iterator();
            while (iterator.hasNext())
            {
                if (predicate.accept(iterator.next()))
                {
                    count++;
                }
            }
            return count;
        }

        public boolean anySatisfy(<name>Predicate predicate)
        {
            <name>Iterator iterator = this.<type>Iterator();
            while (iterator.hasNext())
            {
                if (predicate.accept(iterator.next()))
                {
                    return true;
                }
            }
            return false;
        }

        public boolean allSatisfy(<name>Predicate predicate)
        {
            <name>Iterator iterator = this.<type>Iterator();
            while (iterator.hasNext())
            {
                if (!predicate.accept(iterator.next()))
                {
                    return false;
                }
            }
            return true;
        }

        public boolean noneSatisfy(<name>Predicate predicate)
        {
            <name>Iterator iterator = this.<type>Iterator();
            while (iterator.hasNext())
            {
                if (predicate.accept(iterator.next()))
                {
                    return false;
                }
            }
            return true;
        }

        public <name>Iterable select(<name>Predicate predicate)
        {
            <name>ArrayList result = new <name>ArrayList(<name>ArrayList.this.size);
            <name>Iterator iterator = this.<type>Iterator();
            while (iterator.hasNext())
            {
                <type> value = iterator.next();
                if (predicate.accept(value))
                {
                    result.add(value);
                }
            }
            return result;
        }

        public <name>Iterable reject(<name>Predicate predicate)
        {
            <name>ArrayList result = new <name>ArrayList(<name>ArrayList.this.size);
            <name>Iterator iterator = this.<type>Iterator();
            while (iterator.hasNext())
            {
                <type> value = iterator.next();
                if (!predicate.accept(value))
                {
                    result.add(value);
                }
            }
            return result;
        }

        public <type> detectIfNone(<name>Predicate predicate, <type> ifNone)
        {
            <name>Iterator iterator = this.<type>Iterator();
            while (iterator.hasNext())
            {
                <type> value = iterator.next();
                if (predicate.accept(value))
                {
                    return value;
                }
            }
            return ifNone;
        }

        public \<V> RichIterable\<V> collect(<name>ToObjectFunction\<? extends V> function)
        {
            FastList\<V> results = FastList.newList(<name>ArrayList.this.size);
            <name>Iterator iterator = this.<type>Iterator();
            while (iterator.hasNext())
            {
                results.add(function.valueOf(iterator.next()));
            }
            return results;
        }

        public <wideType.(type)> sum()
        {
            return <name>ArrayList.this.sum();
        }

        public <type> max()
        {
            return <name>ArrayList.this.max();
        }

        public <type> min()
        {
            return <name>ArrayList.this.min();
        }

        public <type> minIfEmpty(<type> defaultValue)
        {
            if (this.isEmpty())
            {
                return defaultValue;
            }
            return this.min();
        }

        public <type> maxIfEmpty(<type> defaultValue)
        {
            if (this.isEmpty())
            {
                return defaultValue;
            }
            return this.max();
        }

        public double average()
        {
            return <name>ArrayList.this.average();
        }

        public double median()
        {
            return <name>ArrayList.this.median();
        }

        public <type>[] toSortedArray()
        {
            return <name>ArrayList.this.toSortedArray();
        }

        public <type>[] toArray()
        {
            <type>[] results = new <type>[<name>ArrayList.this.size];
            int index = 0;
            <name>Iterator iterator = this.<type>Iterator();
            while (iterator.hasNext())
            {
                results[index] = iterator.next();
                index++;
            }
            return results;
        }

        public boolean contains(<type> value)
        {
            return <name>ArrayList.this.contains(value);
        }

        public boolean containsAll(<type>... source)
        {
            return <name>ArrayList.this.containsAll(source);
        }

        public boolean containsAll(<name>Iterable source)
        {
            return <name>ArrayList.this.containsAll(source);
        }

        public int size()
        {
            return <name>ArrayList.this.size;
        }

        public boolean isEmpty()
        {
            return <name>ArrayList.this.isEmpty();
        }

        public boolean notEmpty()
        {
            return <name>ArrayList.this.notEmpty();
        }

        @Override
        public String toString()
        {
            return this.makeString("[", ", ", "]");
        }

        public String makeString()
        {
            return this.makeString(", ");
        }

        public String makeString(String separator)
        {
            return this.makeString("", separator, "");
        }

        public String makeString(String start, String separator, String end)
        {
            Appendable stringBuilder = new StringBuilder();
            this.appendString(stringBuilder, start, separator, end);
            return stringBuilder.toString();
        }

        public void appendString(Appendable appendable)
        {
            this.appendString(appendable, ", ");
        }

        public void appendString(Appendable appendable, String separator)
        {
            this.appendString(appendable, "", separator, "");
        }

        public void appendString(Appendable appendable, String start, String separator, String end)
        {
            try
            {
                appendable.append(start);
                <name>Iterator iterator = this.<type>Iterator();
                boolean appendSeparator = false;
                while (iterator.hasNext())
                {
                    if (appendSeparator)
                    {
                        appendable.append(separator);
                    }
                    appendable.append(String.valueOf(iterator.next()));
                    appendSeparator = true;
                }
                appendable.append(end);
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }

        public Mutable<name>List toList()
        {
            return <name>ArrayList.newList(this);
        }

        public Mutable<name>List toSortedList()
        {
            return <name>ArrayList.newList(this).sortThis();
        }

        public Mutable<name>Set toSet()
        {
            return <name>HashSet.newSet(this);
        }

        public Mutable<name>Bag toBag()
        {
            return <name>HashBag.newBag(this);
        }

        public Lazy<name>Iterable asLazy()
        {
            return new Lazy<name>IterableAdapter(this);
        }

        private class Reverse<name>Iterator implements <name>Iterator
        {
            /**
             * Index of element to be returned by subsequent call to next.
             */
            private int currentIndex = <name>ArrayList.this.size - 1;

            public boolean hasNext()
            {
                return this.currentIndex != -1;
            }

            public <type> next()
            {
                if (!this.hasNext())
                {
                    throw new NoSuchElementException();
                }
                <type> next = <name>ArrayList.this.items[this.currentIndex];
                this.currentIndex--;
                return next;
            }
        }
    }
}

>>
