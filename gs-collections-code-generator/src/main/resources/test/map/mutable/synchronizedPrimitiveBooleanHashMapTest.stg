import "copyright.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"
import "primitiveEquals.stg"

skipBoolean() ::= "true"

isTest() ::= "true"

targetPath() ::= "com/gs/collections/impl/map/mutable/primitive"

fileName(primitive) ::= "Synchronized<primitive.name>BooleanHashMapTest"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyright()>

package com.gs.collections.impl.map.mutable.primitive;

import com.gs.collections.impl.test.Verify;
import org.junit.Assert;
import org.junit.Test;

/**
 * JUnit test for {@link Synchronized<name>BooleanHashMap}.
 * This file was automatically generated from template file synchronizedPrimitiveBooleanHashMapTest.stg.
 */
public class Synchronized<name>BooleanHashMapTest extends Abstract<name>BooleanMapTestCase
{
    private final Synchronized<name>BooleanHashMap map = this.classUnderTest();

    @Override
    protected Synchronized<name>BooleanHashMap classUnderTest()
    {
        return new Synchronized<name>BooleanHashMap(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("31")>, false, <(literal.(type))("32")>, true));
    }

    @Override
    protected Synchronized<name>BooleanHashMap newWithKeysValues(<type> key1, boolean value1)
    {
        return new Synchronized<name>BooleanHashMap(new <name>BooleanHashMap(1).withKeyValue(key1, value1));
    }

    @Override
    protected Synchronized<name>BooleanHashMap newWithKeysValues(<type> key1, boolean value1, <type> key2, boolean value2)
    {
        return new Synchronized<name>BooleanHashMap(new <name>BooleanHashMap(2).withKeysValues(key1, value1, key2, value2));
    }

    @Override
    protected Synchronized<name>BooleanHashMap newWithKeysValues(<type> key1, boolean value1, <type> key2, boolean value2, <type> key3, boolean value3)
    {
        return new Synchronized<name>BooleanHashMap(new <name>BooleanHashMap(3).withKeysValues(key1, value1, key2, value2, key3, value3));
    }

    @Override
    protected Synchronized<name>BooleanHashMap newWithKeysValues(<type> key1, boolean value1, <type> key2, boolean value2, <type> key3, boolean value3, <type> key4, boolean value4)
    {
        return new Synchronized<name>BooleanHashMap(new <name>BooleanHashMap(4).withKeysValues(key1, value1, key2, value2, key3, value3, key4, value4));
    }

    @Override
    protected Synchronized<name>BooleanHashMap getEmptyMap()
    {
        return new Synchronized<name>BooleanHashMap(new <name>BooleanHashMap());
    }

    @Override
    @Test
    public void asSynchronized()
    {
        Verify.assertInstanceOf(Synchronized<name>BooleanHashMap.class, this.map.asSynchronized());
        Assert.assertEquals(new Synchronized<name>BooleanHashMap(this.map), this.map.asSynchronized());
        Assert.assertSame(this.map, this.map.asSynchronized());
    }
}

>>
