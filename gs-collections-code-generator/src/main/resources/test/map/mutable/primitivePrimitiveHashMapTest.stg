import "copyright.stg"
import "primitiveEquals.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"

isTest() ::= "true"

hasTwoPrimitives() ::= "true"

skipBoolean() ::= "true"

targetPath() ::= "com/gs/collections/impl/map/mutable/primitive"

fileName(primitive1, primitive2, sameTwoPrimitives) ::= "<primitive1.name><primitive2.name>HashMapTest"

class(primitive1, primitive2, sameTwoPrimitives) ::= <<
<body(primitive1.type, primitive2.type, primitive1.name, primitive2.name, primitive1.wrapperName, primitive2.wrapperName)>
>>

body(type1, type2, name1, name2, wrapperName1, wrapperName2) ::= <<
<copyright()>

package com.gs.collections.impl.map.mutable.primitive;

import java.lang.reflect.Field;

import com.gs.collections.api.block.function.primitive.Object<name2>ToObjectFunction;
import com.gs.collections.impl.test.Verify;
import org.junit.Assert;
import org.junit.Test;

/**
 * JUnit test for {@link <name1><name2>HashMap}.
 * This file was automatically generated from template file primitivePrimitiveHashMapTest.stg.
 */
public class <name1><name2>HashMapTest extends Abstract<name1><name2>MapTestCase
{
    @Override
    protected <name1><name2>HashMap classUnderTest()
    {
        return <name1><name2>HashMap.newWithKeysValues(<["0", "31", "32"]:keyValue(); separator=", ">);
    }

    @Override
    protected <name1><name2>HashMap newWithKeysValues(<type1> key1, <type2> value1)
    {
        return new <name1><name2>HashMap(1).withKeyValue(key1, value1);
    }

    @Override
	protected <name1><name2>HashMap newWithKeysValues(<type1> key1, <type2> value1, <type1> key2, <type2> value2)
    {
        return new <name1><name2>HashMap(2).withKeysValues(key1, value1, key2, value2);
    }

    @Override
	protected <name1><name2>HashMap newWithKeysValues(<type1> key1, <type2> value1, <type1> key2, <type2> value2, <type1> key3, <type2> value3)
    {
        return new <name1><name2>HashMap(3).withKeysValues(key1, value1, key2, value2, key3, value3);
    }

    @Override
	protected <name1><name2>HashMap newWithKeysValues(<type1> key1, <type2> value1, <type1> key2, <type2> value2, <type1> key3, <type2> value3, <type1> key4, <type2> value4)
    {
        return new <name1><name2>HashMap(4).withKeysValues(key1, value1, key2, value2, key3, value3, key4, value4);
    }

    @Override
	protected <name1><name2>HashMap getEmptyMap()
    {
        return new <name1><name2>HashMap();
    }

    @Test
    public void defaultInitialCapacity() throws Exception
    {
        Field keys = <name1><name2>HashMap.class.getDeclaredField("keys");
        keys.setAccessible(true);
        Field values = <name1><name2>HashMap.class.getDeclaredField("values");
        values.setAccessible(true);

        <name1><name2>HashMap hashMap = new <name1><name2>HashMap();
        Assert.assertEquals(16L, ((<type1>[]) keys.get(hashMap)).length);
        Assert.assertEquals(16L, ((<type2>[]) values.get(hashMap)).length);
    }

    @Test
    public void newWithInitialCapacity() throws Exception
    {
        Field keys = <name1><name2>HashMap.class.getDeclaredField("keys");
        keys.setAccessible(true);
        Field values = <name1><name2>HashMap.class.getDeclaredField("values");
        values.setAccessible(true);

        <name1><name2>HashMap hashMap = new <name1><name2>HashMap(3);
        Assert.assertEquals(8L, ((<type1>[]) keys.get(hashMap)).length);
        Assert.assertEquals(8L, ((<type2>[]) values.get(hashMap)).length);

        <name1><name2>HashMap hashMap2 = new <name1><name2>HashMap(15);
        Assert.assertEquals(32L, ((<type1>[]) keys.get(hashMap2)).length);
        Assert.assertEquals(32L, ((<type2>[]) values.get(hashMap2)).length);
    }

    @Test(expected = IllegalArgumentException.class)
    public void newWithInitialCapacity_negative_throws()
    {
        new <name1><name2>HashMap(-1);
    }

    @Test
    public void newMap() throws Exception
    {
        Field keys = <name1><name2>HashMap.class.getDeclaredField("keys");
        keys.setAccessible(true);
        Field values = <name1><name2>HashMap.class.getDeclaredField("values");
        values.setAccessible(true);

        <name1><name2>HashMap hashMap = new <name1><name2>HashMap();
        Assert.assertEquals(16L, ((<type1>[]) keys.get(hashMap)).length);
        Assert.assertEquals(16L, ((<type2>[]) values.get(hashMap)).length);
        Assert.assertEquals(new <name1><name2>HashMap(), hashMap);
    }

    @Test
    public void putWithRehash() throws Exception
    {
        <name1><name2>HashMap hashMap = new <name1><name2>HashMap();
        for (int i = 2; i \< 10; i++)
        {
            Assert.assertFalse(hashMap.containsKey(<(castFromInt.(type1))("i")>));
            hashMap.put(<(castFromInt.(type1))("i")>, <(castFromInt.(type2))("i")>);
        }

        Field keys = <name1><name2>HashMap.class.getDeclaredField("keys");
        Field values = <name1><name2>HashMap.class.getDeclaredField("values");
        keys.setAccessible(true);
        values.setAccessible(true);
        Assert.assertEquals(16L, ((<type1>[]) keys.get(hashMap)).length);
        Assert.assertEquals(16L, ((<type2>[]) values.get(hashMap)).length);
        Verify.assertSize(8, hashMap);
        for (int i = 2; i \< 10; i++)
        {
            Assert.assertTrue(hashMap.containsKey(<(castFromInt.(type1))("i")>));
            Assert.assertTrue(hashMap.containsValue(<(castFromInt.(type2))("i")>));
        }
        hashMap.put(<(literal.(type1))("10")>, <(literal.(type2))("10")>);
        Assert.assertEquals(32L, ((<type1>[]) keys.get(hashMap)).length);
        Assert.assertEquals(32L, ((<type2>[]) values.get(hashMap)).length);
    }

    @Override
    @Test
    public void withKeysValues()
    {
        super.withKeysValues();
        <name1><name2>HashMap hashMap0 = new <name1><name2>HashMap();
        Assert.assertSame(hashMap0.withKeysValues(<(literal.(type1))("1")>, <(literal.(type2))("1")>, <(literal.(type1))("2")>, <(literal.(type2))("2")>), hashMap0);
        <name1><name2>HashMap hashMap1 = new <name1><name2>HashMap().withKeysValues(<(literal.(type1))("1")>, <(literal.(type2))("1")>, <(literal.(type1))("2")>, <(literal.(type2))("2")>, <(literal.(type1))("3")>, <(literal.(type2))("3")>);
        <name1><name2>HashMap hashMap2 = new <name1><name2>HashMap().withKeysValues(<(literal.(type1))("1")>, <(literal.(type2))("1")>, <(literal.(type1))("2")>, <(literal.(type2))("2")>, <(literal.(type1))("3")>, <(literal.(type2))("3")>, <(literal.(type1))("4")>, <(literal.(type2))("4")>);
        Assert.assertEquals(<name1><name2>HashMap.newWithKeysValues(<(literal.(type1))("1")>, <(literal.(type2))("1")>, <(literal.(type1))("2")>, <(literal.(type2))("2")>), hashMap0);
        Assert.assertEquals(<name1><name2>HashMap.newWithKeysValues(<(literal.(type1))("1")>, <(literal.(type2))("1")>, <(literal.(type1))("2")>, <(literal.(type2))("2")>, <(literal.(type1))("3")>, <(literal.(type2))("3")>), hashMap1);
        Assert.assertEquals(<name1><name2>HashMap.newWithKeysValues(<(literal.(type1))("1")>, <(literal.(type2))("1")>, <(literal.(type1))("2")>, <(literal.(type2))("2")>, <(literal.(type1))("3")>, <(literal.(type2))("3")>, <(literal.(type1))("4")>, <(literal.(type2))("4")>), hashMap2);
    }

    @Test
    public void injectInto()
    {
        <name1><name2>HashMap hashMap = new <name1><name2>HashMap().withKeysValues(<(literal.(type1))("1")>, <(literal.(type2))("2")>, <(literal.(type1))("2")>, <(literal.(type2))("3")>, <(literal.(type1))("3")>, <(literal.(type2))("4")>, <(literal.(type1))("4")>, <(literal.(type2))("5")>);
        <wrapperName2> sum = hashMap.injectInto(<wrapperName2>.valueOf(<(literal.(type2))("1")>), new Object<name2>ToObjectFunction\<<wrapperName2>, <wrapperName2>\>()
        {
            public <wrapperName2> valueOf(<wrapperName2> result, <type2> value)
            {
                return <wrapperName2>.valueOf((<type2>) (result + value));
            }
        });
        Assert.assertEquals(<wrapperName2>.valueOf(<(literal.(type2))("15")>), sum);
    }
}

>>

keyValue(value) ::= <<
<(literal.(type1))(value)>, <(literal.(type2))(value)>
>>
