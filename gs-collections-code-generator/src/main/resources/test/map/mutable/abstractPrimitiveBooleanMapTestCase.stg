import "copyright.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"
import "primitiveEquals.stg"

skipBoolean() ::= "true"

isTest() ::= "true"

targetPath() ::= "com/gs/collections/impl/map/mutable/primitive"

fileName(primitive) ::= "Abstract<primitive.name>BooleanMapTestCase"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyright()>

package com.gs.collections.impl.map.mutable.primitive;

import java.util.Arrays;
import java.util.NoSuchElementException;

import com.gs.collections.api.BooleanIterable;
import com.gs.collections.api.LazyBooleanIterable;
import com.gs.collections.api.RichIterable;
import com.gs.collections.api.bag.primitive.MutableBooleanBag;
import com.gs.collections.api.block.function.primitive.BooleanFunction;
import com.gs.collections.api.block.function.primitive.BooleanFunction0;
import com.gs.collections.api.block.function.primitive.BooleanToBooleanFunction;
import com.gs.collections.api.block.function.primitive.BooleanToObjectFunction;
import com.gs.collections.api.block.function.primitive.<name>ToBooleanFunction;
import com.gs.collections.api.block.predicate.primitive.<name>BooleanPredicate;
import com.gs.collections.api.block.procedure.primitive.BooleanProcedure;
import com.gs.collections.api.block.procedure.primitive.<name>BooleanProcedure;
import com.gs.collections.api.block.procedure.primitive.<name>Procedure;
import com.gs.collections.api.iterator.BooleanIterator;
import com.gs.collections.api.list.primitive.Mutable<name>List;
import com.gs.collections.api.map.primitive.<name>BooleanMap;
import com.gs.collections.api.map.primitive.Mutable<name>BooleanMap;
import com.gs.collections.impl.bag.mutable.HashBag;
import com.gs.collections.impl.bag.mutable.primitive.BooleanHashBag;
import com.gs.collections.impl.block.factory.primitive.BooleanPredicates;
import com.gs.collections.impl.list.mutable.primitive.BooleanArrayList;
import com.gs.collections.impl.list.mutable.primitive.<name>ArrayList;
import com.gs.collections.impl.map.mutable.UnifiedMap;
import com.gs.collections.impl.set.mutable.primitive.BooleanHashSet;
import com.gs.collections.impl.test.Verify;
import org.junit.Assert;
import org.junit.Test;

/**
 * This file was automatically generated from template file abstractPrimitiveBooleanMapTestCase.stg.
 */
public abstract class Abstract<name>BooleanMapTestCase
{
    private final Mutable<name>BooleanMap map = this.classUnderTest();

    protected static <name>ArrayList generateCollisions()
    {
        <name>ArrayList collisions = new <name>ArrayList();
        <name>BooleanHashMap hashMap = new <name>BooleanHashMap();
        for (<type> each = <(literal.(type))("2")>; collisions.size() \<= 10; each++)
        {
            if (hashMap.spread(each) == hashMap.spread(<(literal.(type))("2")>))
            {
                collisions.add(each);
            }
        }
        return collisions;
    }

    protected abstract Mutable<name>BooleanMap classUnderTest();

    protected abstract Mutable<name>BooleanMap newWithKeysValues(<type> key1, boolean value1);

    protected abstract Mutable<name>BooleanMap newWithKeysValues(<type> key1, boolean value1, <type> key2, boolean value2);

    protected abstract Mutable<name>BooleanMap newWithKeysValues(<type> key1, boolean value1, <type> key2, boolean value2, <type> key3, boolean value3);

    protected abstract Mutable<name>BooleanMap newWithKeysValues(<type> key1, boolean value1, <type> key2, boolean value2, <type> key3, boolean value3, <type> key4, boolean value4);

    protected abstract Mutable<name>BooleanMap getEmptyMap();

    @Test
    public void clear()
    {
        this.map.clear();
        Assert.assertEquals(new <name>BooleanHashMap(), this.map);

        this.map.put(<(literal.(type))("1")>, false);
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("1")>, false), this.map);
        this.map.clear();
        Assert.assertEquals(new <name>BooleanHashMap(), this.map);

        this.map.put(<(literal.(type))("33")>, false);
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("33")>, false), this.map);
        this.map.clear();
        Assert.assertEquals(new <name>BooleanHashMap(), this.map);
    }

    @Test
    public void removeKey()
    {
        this.map.removeKey(<(literal.(type))("5")>);
        this.map.removeKey(<(literal.(type))("50")>);
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("31")>, false, <(literal.(type))("32")>, true), this.map);
        this.map.removeKey(<(literal.(type))("0")>);
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("31")>, false, <(literal.(type))("32")>, true), this.map);
        this.map.removeKey(<(literal.(type))("31")>);
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("32")>, true), this.map);
        this.map.removeKey(<(literal.(type))("32")>);
        Assert.assertEquals(new <name>BooleanHashMap(), this.map);
        this.map.removeKey(<(literal.(type))("0")>);
        this.map.removeKey(<(literal.(type))("31")>);
        this.map.removeKey(<(literal.(type))("32")>);
        Assert.assertEquals(new <name>BooleanHashMap(), this.map);
        Verify.assertEmpty(this.map);

        this.map.put(Abstract<name>BooleanMapTestCase.generateCollisions().get(0), true);
        this.map.put(Abstract<name>BooleanMapTestCase.generateCollisions().get(1), false);

        Assert.assertTrue(this.map.get(Abstract<name>BooleanMapTestCase.generateCollisions().get(0)));
        this.map.removeKey(Abstract<name>BooleanMapTestCase.generateCollisions().get(0));
        Assert.assertFalse(this.map.get(Abstract<name>BooleanMapTestCase.generateCollisions().get(0)));

        Assert.assertFalse(this.map.get(Abstract<name>BooleanMapTestCase.generateCollisions().get(1)));
        this.map.removeKey(Abstract<name>BooleanMapTestCase.generateCollisions().get(1));
        Assert.assertFalse(this.map.get(Abstract<name>BooleanMapTestCase.generateCollisions().get(1)));

        Mutable<name>BooleanMap map1 = this.newWithKeysValues(<(literal.(type))("1")>, true);
        map1.removeKey(<(literal.(type))("1")>);
        Assert.assertEquals(new <name>BooleanHashMap(), map1);
    }

    @Test
    public void removeKeyIfAbsent()
    {
        Assert.assertTrue(this.map.removeKeyIfAbsent(<(literal.(type))("5")>, true));
        Assert.assertFalse(this.map.removeKeyIfAbsent(<(literal.(type))("50")>, false));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("31")>, false, <(literal.(type))("32")>, true), this.map);
        Assert.assertTrue(this.map.removeKeyIfAbsent(<(literal.(type))("0")>, false));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("31")>, false, <(literal.(type))("32")>, true), this.map);
        Assert.assertFalse(this.map.removeKeyIfAbsent(<(literal.(type))("31")>, true));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("32")>, true), this.map);
        Assert.assertTrue(this.map.removeKeyIfAbsent(<(literal.(type))("32")>, false));
        Assert.assertEquals(new <name>BooleanHashMap(), this.map);
        Assert.assertTrue(this.map.removeKeyIfAbsent(<(literal.(type))("0")>, true));
        Assert.assertFalse(this.map.removeKeyIfAbsent(<(literal.(type))("31")>, false));
        Assert.assertFalse(this.map.removeKeyIfAbsent(<(literal.(type))("32")>, false));
        Assert.assertEquals(new <name>BooleanHashMap(), this.map);
        Verify.assertEmpty(this.map);

        this.map.put(Abstract<name>BooleanMapTestCase.generateCollisions().get(0), true);
        this.map.put(Abstract<name>BooleanMapTestCase.generateCollisions().get(1), false);

        Assert.assertTrue(this.map.get(Abstract<name>BooleanMapTestCase.generateCollisions().get(0)));
        Assert.assertTrue(this.map.removeKeyIfAbsent(Abstract<name>BooleanMapTestCase.generateCollisions().get(0), false));
        Assert.assertFalse(this.map.get(Abstract<name>BooleanMapTestCase.generateCollisions().get(0)));

        Assert.assertFalse(this.map.get(Abstract<name>BooleanMapTestCase.generateCollisions().get(1)));
        Assert.assertFalse(this.map.removeKeyIfAbsent(Abstract<name>BooleanMapTestCase.generateCollisions().get(1), true));
        Assert.assertFalse(this.map.get(Abstract<name>BooleanMapTestCase.generateCollisions().get(1)));

        Assert.assertTrue(this.classUnderTest().withKeyValue(<(literal.(type))("1")>, true).removeKeyIfAbsent(<(literal.(type))("0")>, false));

        Mutable<name>BooleanMap map1 = this.classUnderTest().withKeyValue(<(literal.(type))("1")>, true);
        Assert.assertTrue(map1.removeKeyIfAbsent(<(literal.(type))("1")>, false));
        Assert.assertTrue(map1.removeKeyIfAbsent(<(literal.(type))("0")>, false));
        Assert.assertFalse(map1.removeKeyIfAbsent(<(literal.(type))("1")>, false));

        Mutable<name>BooleanMap map2 = this.newWithKeysValues(<(literal.(type))("1")>, true);
        Assert.assertTrue(map2.removeKeyIfAbsent(<(literal.(type))("1")>, false));
    }

    @Test
    public void put()
    {
        this.map.put(<(literal.(type))("0")>, false);
        this.map.put(<(literal.(type))("31")>, true);
        this.map.put(<(literal.(type))("32")>, false);
        Mutable<name>BooleanMap expected = this.newWithKeysValues(<(literal.(type))("0")>, false, <(literal.(type))("31")>, true, <(literal.(type))("32")>, false);
        Assert.assertEquals(expected, this.map);

        this.map.put(<(literal.(type))("1")>, true);
        expected.put(<(literal.(type))("1")>, true);
        Assert.assertEquals(expected, this.map);

        this.map.put(<(literal.(type))("33")>, false);
        expected.put(<(literal.(type))("33")>, false);
        Assert.assertEquals(expected, this.map);

        this.map.put(<(literal.(type))("30")>, true);
        expected.put(<(literal.(type))("30")>, true);
        Assert.assertEquals(expected, this.map);
    }

    @Test
    public void putDuplicateWithRemovedSlot()
    {
        <type> collision1 = Abstract<name>BooleanMapTestCase.generateCollisions().getFirst();
        <type> collision2 = Abstract<name>BooleanMapTestCase.generateCollisions().get(1);
        <type> collision3 = Abstract<name>BooleanMapTestCase.generateCollisions().get(2);
        <type> collision4 = Abstract<name>BooleanMapTestCase.generateCollisions().get(3);

        Mutable<name>BooleanMap hashMap = this.getEmptyMap();
        hashMap.put(collision1, true);
        hashMap.put(collision2, false);
        hashMap.put(collision3, true);
        Assert.assertFalse(hashMap.get(collision2));
        hashMap.removeKey(collision2);
        hashMap.put(collision4, false);
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(collision1, true, collision3, true, collision4, false), hashMap);

        Mutable<name>BooleanMap hashMap1 = this.getEmptyMap();
        hashMap1.put(collision1, false);
        hashMap1.put(collision2, true);
        hashMap1.put(collision3, false);
        Assert.assertFalse(hashMap1.get(collision1));
        hashMap1.removeKey(collision1);
        hashMap1.put(collision4, true);
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(collision2, true, collision3, false, collision4, true), hashMap1);

        Mutable<name>BooleanMap hashMap2 = this.getEmptyMap();
        hashMap2.put(collision1, true);
        hashMap2.put(collision2, false);
        hashMap2.put(collision3, true);
        Assert.assertTrue(hashMap2.get(collision3));
        hashMap2.removeKey(collision3);
        hashMap2.put(collision4, false);
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(collision1, true, collision2, false, collision4, false), hashMap2);
    }

    @Test
    public void get()
    {
        Assert.assertTrue(this.map.get(<(literal.(type))("0")>));
        Assert.assertFalse(this.map.get(<(literal.(type))("31")>));
        Assert.assertTrue(this.map.get(<(literal.(type))("32")>));

        Assert.assertFalse(this.map.get(<(literal.(type))("1")>));
        Assert.assertFalse(this.map.get(<(literal.(type))("33")>));

        this.map.put(<(literal.(type))("0")>, false);
        Assert.assertFalse(this.map.get(<(literal.(type))("0")>));

        this.map.put(<(literal.(type))("1")>, true);
        Assert.assertTrue(this.map.get(<(literal.(type))("1")>));

        this.map.put(<(literal.(type))("5")>, true);
        Assert.assertTrue(this.map.get(<(literal.(type))("5")>));

        this.map.put(<(literal.(type))("35")>, false);
        Assert.assertFalse(this.map.get(<(literal.(type))("35")>));
    }

    @Test
    public void getIfAbsent()
    {
        Assert.assertTrue(this.map.getIfAbsent(<(literal.(type))("0")>, false));
        Assert.assertFalse(this.map.getIfAbsent(<(literal.(type))("31")>, true));
        Assert.assertTrue(this.map.getIfAbsent(<(literal.(type))("32")>, false));

        this.map.removeKey(<(literal.(type))("0")>);
        Assert.assertFalse(this.map.getIfAbsent(<(literal.(type))("0")>, false));
        Assert.assertTrue(this.map.getIfAbsent(<(literal.(type))("0")>, true));

        Assert.assertFalse(this.map.getIfAbsent(<(literal.(type))("1")>, false));
        Assert.assertTrue(this.map.getIfAbsent(<(literal.(type))("1")>, true));

        Assert.assertFalse(this.map.getIfAbsent(<(literal.(type))("33")>, false));
        Assert.assertTrue(this.map.getIfAbsent(<(literal.(type))("33")>, true));

        this.map.put(<(literal.(type))("0")>, false);
        Assert.assertFalse(this.map.getIfAbsent(<(literal.(type))("0")>, true));

        this.map.put(<(literal.(type))("1")>, true);
        Assert.assertTrue(this.map.getIfAbsent(<(literal.(type))("1")>, false));

        this.map.put(<(literal.(type))("5")>, false);
        Assert.assertFalse(this.map.getIfAbsent(<(literal.(type))("5")>, true));

        this.map.put(<(literal.(type))("35")>, true);
        Assert.assertTrue(this.map.getIfAbsent(<(literal.(type))("35")>, false));
    }

    @Test
    public void getOrThrow()
    {
        Assert.assertTrue(this.map.getOrThrow(<(literal.(type))("0")>));
        Assert.assertFalse(this.map.getOrThrow(<(literal.(type))("31")>));
        Assert.assertTrue(this.map.getOrThrow(<(literal.(type))("32")>));

        this.map.removeKey(<(literal.(type))("0")>);
        Verify.assertThrows(IllegalStateException.class, new Runnable()
        {
            public void run()
            {
                Abstract<name>BooleanMapTestCase.this.map.getOrThrow(<(literal.(type))("0")>);
            }
        });
        Verify.assertThrows(IllegalStateException.class, new Runnable()
        {
            public void run()
            {
                Abstract<name>BooleanMapTestCase.this.map.getOrThrow(<(literal.(type))("1")>);
            }
        });
        Verify.assertThrows(IllegalStateException.class, new Runnable()
        {
            public void run()
            {
                Abstract<name>BooleanMapTestCase.this.map.getOrThrow(<(literal.(type))("33")>);
            }
        });

        this.map.put(<(literal.(type))("0")>, false);
        Assert.assertFalse(this.map.getOrThrow(<(literal.(type))("0")>));

        this.map.put(<(literal.(type))("1")>, true);
        Assert.assertTrue(this.map.getOrThrow(<(literal.(type))("1")>));

        this.map.put(<(literal.(type))("5")>, false);
        Assert.assertFalse(this.map.getOrThrow(<(literal.(type))("5")>));

        this.map.put(<(literal.(type))("35")>, true);
        Assert.assertTrue(this.map.getOrThrow(<(literal.(type))("35")>));
    }

    @Test
    public void getIfAbsentPut()
    {
        Mutable<name>BooleanMap map1 = this.getEmptyMap();
        Assert.assertTrue(map1.getIfAbsentPut(<(literal.(type))("0")>, true));
        Assert.assertTrue(map1.getIfAbsentPut(<(literal.(type))("0")>, false));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("0")>, true), map1);
        Assert.assertFalse(map1.getIfAbsentPut(<(literal.(type))("1")>, false));
        Assert.assertFalse(map1.getIfAbsentPut(<(literal.(type))("1")>, true));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("1")>, false), map1);

        Mutable<name>BooleanMap map2 = this.getEmptyMap();
        Assert.assertTrue(map2.getIfAbsentPut(<(literal.(type))("1")>, true));
        Assert.assertTrue(map2.getIfAbsentPut(<(literal.(type))("1")>, false));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("1")>, true), map2);
        Assert.assertFalse(map2.getIfAbsentPut(<(literal.(type))("0")>, false));
        Assert.assertFalse(map2.getIfAbsentPut(<(literal.(type))("0")>, true));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("0")>, false, <(literal.(type))("1")>, true), map2);

        Mutable<name>BooleanMap map3 = this.getEmptyMap();
        Assert.assertTrue(map3.getIfAbsentPut(<(literal.(type))("32")>, true));
        Assert.assertTrue(map3.getIfAbsentPut(<(literal.(type))("32")>, false));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("32")>, true), map3);

        Mutable<name>BooleanMap map4 = this.getEmptyMap();
        Assert.assertFalse(map4.getIfAbsentPut(<(literal.(type))("33")>, false));
        Assert.assertFalse(map4.getIfAbsentPut(<(literal.(type))("33")>, true));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("33")>, false), map4);
    }

    @Test
    public void getIfAbsentPut_Function()
    {
        BooleanFunction0 factory = new BooleanFunction0()
        {
            public boolean value()
            {
                return true;
            }
        };

        BooleanFunction0 factoryThrows = new BooleanFunction0()
        {
            public boolean value()
            {
                throw new AssertionError();
            }
        };

        Mutable<name>BooleanMap map1 = this.getEmptyMap();
        Assert.assertTrue(map1.getIfAbsentPut(<(literal.(type))("0")>, factory));
        Assert.assertTrue(map1.getIfAbsentPut(<(literal.(type))("0")>, factoryThrows));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("0")>, true), map1);
        Assert.assertTrue(map1.getIfAbsentPut(<(literal.(type))("1")>, factory));
        Assert.assertTrue(map1.getIfAbsentPut(<(literal.(type))("1")>, factoryThrows));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("1")>, true), map1);

        Mutable<name>BooleanMap map2 = this.getEmptyMap();
        Assert.assertTrue(map2.getIfAbsentPut(<(literal.(type))("1")>, factory));
        Assert.assertTrue(map2.getIfAbsentPut(<(literal.(type))("1")>, factoryThrows));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("1")>, true), map2);
        Assert.assertTrue(map2.getIfAbsentPut(<(literal.(type))("0")>, factory));
        Assert.assertTrue(map2.getIfAbsentPut(<(literal.(type))("0")>, factoryThrows));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("1")>, true), map2);

        Mutable<name>BooleanMap map3 = this.getEmptyMap();
        Assert.assertTrue(map3.getIfAbsentPut(<(literal.(type))("32")>, factory));
        Assert.assertTrue(map3.getIfAbsentPut(<(literal.(type))("32")>, factoryThrows));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("32")>, true), map3);

        Mutable<name>BooleanMap map4 = this.getEmptyMap();
        Assert.assertTrue(map4.getIfAbsentPut(<(literal.(type))("33")>, factory));
        Assert.assertTrue(map4.getIfAbsentPut(<(literal.(type))("33")>, factoryThrows));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("33")>, true), map4);
    }

    @Test
    public void getIfAbsentPutWith()
    {
        BooleanFunction\<String> functionLengthEven = new BooleanFunction\<String>()
        {
            public boolean booleanValueOf(String string)
            {
                return (string.length() & 1) == <(literal.(type))("0")>;
            }
        };

        BooleanFunction\<String> functionThrows = new BooleanFunction\<String>()
        {
            public boolean booleanValueOf(String string)
            {
                throw new AssertionError();
            }
        };

        Mutable<name>BooleanMap map1 = this.getEmptyMap();
        Assert.assertTrue(map1.getIfAbsentPutWith(<(literal.(type))("0")>, functionLengthEven, "12345678"));
        Assert.assertTrue(map1.getIfAbsentPutWith(<(literal.(type))("0")>, functionThrows, "unused"));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("0")>, true), map1);
        Assert.assertFalse(map1.getIfAbsentPutWith(<(literal.(type))("1")>, functionLengthEven, "123456789"));
        Assert.assertFalse(map1.getIfAbsentPutWith(<(literal.(type))("1")>, functionThrows, "unused"));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("1")>, false), map1);

        Mutable<name>BooleanMap map2 = this.getEmptyMap();
        Assert.assertTrue(map2.getIfAbsentPutWith(<(literal.(type))("1")>, functionLengthEven, "12345678"));
        Assert.assertTrue(map2.getIfAbsentPutWith(<(literal.(type))("1")>, functionThrows, "unused"));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("1")>, true), map2);
        Assert.assertFalse(map2.getIfAbsentPutWith(<(literal.(type))("0")>, functionLengthEven, "123456789"));
        Assert.assertFalse(map2.getIfAbsentPutWith(<(literal.(type))("0")>, functionThrows, "unused"));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("0")>, false, <(literal.(type))("1")>, true), map2);

        Mutable<name>BooleanMap map3 = this.getEmptyMap();
        Assert.assertTrue(map3.getIfAbsentPutWith(<(literal.(type))("32")>, functionLengthEven, "12345678"));
        Assert.assertTrue(map3.getIfAbsentPutWith(<(literal.(type))("32")>, functionThrows, "unused"));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("32")>, true), map3);

        Mutable<name>BooleanMap map4 = this.getEmptyMap();
        Assert.assertTrue(map4.getIfAbsentPutWith(<(literal.(type))("33")>, functionLengthEven, "12345678"));
        Assert.assertTrue(map4.getIfAbsentPutWith(<(literal.(type))("33")>, functionThrows, "unused"));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("33")>, true), map4);
    }

    @Test
    public void getIfAbsentPutWithKey()
    {
        <name>ToBooleanFunction keyIsEven = new <name>ToBooleanFunction()
        {
            public boolean valueOf(<type> parameter)
            {
                return (<(castRealTypeToInt.(type))("parameter")> & 1) == <(literal.(type))("0")>;
            }
        };

        <name>ToBooleanFunction functionThrows = new <name>ToBooleanFunction()
        {
            public boolean valueOf(<type> <type>Parameter)
            {
                throw new AssertionError();
            }
        };

        Mutable<name>BooleanMap map1 = this.getEmptyMap();
        Assert.assertTrue(map1.getIfAbsentPutWithKey(<(literal.(type))("0")>, keyIsEven));
        Assert.assertTrue(map1.getIfAbsentPutWithKey(<(literal.(type))("0")>, functionThrows));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("0")>, true), map1);
        Assert.assertFalse(map1.getIfAbsentPutWithKey(<(literal.(type))("1")>, keyIsEven));
        Assert.assertFalse(map1.getIfAbsentPutWithKey(<(literal.(type))("1")>, functionThrows));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("1")>, false), map1);

        Mutable<name>BooleanMap map2 = this.getEmptyMap();
        Assert.assertFalse(map2.getIfAbsentPutWithKey(<(literal.(type))("1")>, keyIsEven));
        Assert.assertFalse(map2.getIfAbsentPutWithKey(<(literal.(type))("1")>, functionThrows));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("1")>, false), map2);
        Assert.assertTrue(map2.getIfAbsentPutWithKey(<(literal.(type))("0")>, keyIsEven));
        Assert.assertTrue(map2.getIfAbsentPutWithKey(<(literal.(type))("0")>, functionThrows));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("1")>, false), map2);

        Mutable<name>BooleanMap map3 = this.getEmptyMap();
        Assert.assertTrue(map3.getIfAbsentPutWithKey(<(literal.(type))("32")>, keyIsEven));
        Assert.assertTrue(map3.getIfAbsentPutWithKey(<(literal.(type))("32")>, functionThrows));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("32")>, true), map3);

        Mutable<name>BooleanMap map4 = this.getEmptyMap();
        Assert.assertFalse(map4.getIfAbsentPutWithKey(<(literal.(type))("33")>, keyIsEven));
        Assert.assertFalse(map4.getIfAbsentPutWithKey(<(literal.(type))("33")>, functionThrows));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("33")>, false), map4);
    }

    @Test
    public void updateValue()
    {
        BooleanToBooleanFunction flip = new BooleanToBooleanFunction()
        {
            public boolean valueOf(boolean value)
            {
                return !value;
            }
        };

        Mutable<name>BooleanMap map1 = this.getEmptyMap();
        Assert.assertTrue(map1.updateValue(<(literal.(type))("0")>, false, flip));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("0")>, true), map1);
        Assert.assertFalse(map1.updateValue(<(literal.(type))("0")>, false, flip));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("0")>, false), map1);
        Assert.assertFalse(map1.updateValue(<(literal.(type))("1")>, true, flip));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("0")>, false, <(literal.(type))("1")>, false), map1);
        Assert.assertTrue(map1.updateValue(<(literal.(type))("1")>, true, flip));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("0")>, false, <(literal.(type))("1")>, true), map1);

        Mutable<name>BooleanMap map2 = this.getEmptyMap();
        Assert.assertTrue(map2.updateValue(<(literal.(type))("1")>, false, flip));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("1")>, true), map2);
        Assert.assertFalse(map2.updateValue(<(literal.(type))("1")>, false, flip));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("1")>, false), map2);
        Assert.assertFalse(map2.updateValue(<(literal.(type))("0")>, true, flip));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("0")>, false, <(literal.(type))("1")>, false), map2);
        Assert.assertTrue(map2.updateValue(<(literal.(type))("0")>, true, flip));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("1")>, false), map2);

        Mutable<name>BooleanMap map3 = this.getEmptyMap();
        Assert.assertTrue(map3.updateValue(<(literal.(type))("33")>, false, flip));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("33")>, true), map3);
        Assert.assertFalse(map3.updateValue(<(literal.(type))("33")>, false, flip));
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("33")>, false), map3);
    }

    @Test
    public void containsKey()
    {
        Assert.assertTrue(this.map.containsKey(<(literal.(type))("0")>));
        Assert.assertTrue(this.map.containsKey(<(literal.(type))("31")>));
        Assert.assertTrue(this.map.containsKey(<(literal.(type))("32")>));
        Assert.assertFalse(this.map.containsKey(<(literal.(type))("1")>));
        Assert.assertFalse(this.map.containsKey(<(literal.(type))("5")>));
        Assert.assertFalse(this.map.containsKey(<(literal.(type))("35")>));

        this.map.removeKey(<(literal.(type))("0")>);
        Assert.assertFalse(this.map.containsKey(<(literal.(type))("0")>));
        Assert.assertFalse(this.map.get(<(literal.(type))("0")>));
        this.map.removeKey(<(literal.(type))("0")>);
        Assert.assertFalse(this.map.containsKey(<(literal.(type))("0")>));
        Assert.assertFalse(this.map.get(<(literal.(type))("0")>));

        this.map.removeKey(<(literal.(type))("1")>);
        Assert.assertFalse(this.map.containsKey(<(literal.(type))("1")>));
        Assert.assertFalse(this.map.get(<(literal.(type))("1")>));

        this.map.removeKey(<(literal.(type))("31")>);
        Assert.assertFalse(this.map.containsKey(<(literal.(type))("31")>));
        Assert.assertFalse(this.map.get(<(literal.(type))("31")>));

        this.map.removeKey(<(literal.(type))("32")>);
        Assert.assertFalse(this.map.containsKey(<(literal.(type))("32")>));
        Assert.assertFalse(this.map.get(<(literal.(type))("32")>));
    }

    @Test
    public void containsValue()
    {
        Assert.assertTrue(this.map.containsValue(true));
        Assert.assertTrue(this.map.containsValue(false));

        this.map.clear();
        this.map.put(<(literal.(type))("35")>, true);
        Assert.assertTrue(this.map.containsValue(true));

        this.map.removeKey(<(literal.(type))("35")>);
        Assert.assertFalse(this.map.containsValue(false));
        Assert.assertFalse(this.map.containsValue(true));
    }

    @Test
    public void contains()
    {
        Assert.assertTrue(this.map.contains(true));
        Assert.assertTrue(this.map.contains(false));

        this.map.clear();
        this.map.put(<(literal.(type))("35")>, true);
        Assert.assertTrue(this.map.contains(true));

        this.map.removeKey(<(literal.(type))("35")>);
        Assert.assertFalse(this.map.contains(false));
        Assert.assertFalse(this.map.contains(true));
    }

    @Test
    public void containsAll()
    {
        Assert.assertTrue(this.map.containsAll(true, false));
        Assert.assertTrue(this.map.containsAll(true, true));
        Assert.assertTrue(this.map.containsAll(false, false));
        this.map.clear();

        this.map.put(<(literal.(type))("5")>, true);
        Assert.assertTrue(this.map.containsAll(true));
        Assert.assertFalse(this.map.containsAll(true, false));
        Assert.assertFalse(this.map.containsAll(false, false));

        this.map.put(<(literal.(type))("0")>, false);
        Assert.assertTrue(this.map.containsAll(false));
        Assert.assertTrue(this.map.containsAll(true, false));

        this.map.removeKey(<(literal.(type))("5")>);
        Assert.assertFalse(this.map.containsAll(true));
        Assert.assertFalse(this.map.containsAll(true, false));
        Assert.assertTrue(this.map.containsAll(false, false));

        this.map.removeKey(<(literal.(type))("0")>);
        Assert.assertFalse(this.map.containsAll(false, true));
    }

    @Test
    public void containsAllIterable()
    {
        Assert.assertTrue(this.map.containsAll(BooleanArrayList.newListWith(true, false)));
        Assert.assertTrue(this.map.containsAll(BooleanArrayList.newListWith(true, true)));
        Assert.assertTrue(this.map.containsAll(BooleanArrayList.newListWith(false, false)));
        this.map.clear();

        this.map.put(<(literal.(type))("5")>, true);
        Assert.assertTrue(this.map.containsAll(BooleanArrayList.newListWith(true)));
        Assert.assertFalse(this.map.containsAll(BooleanArrayList.newListWith(true, false)));
        Assert.assertFalse(this.map.containsAll(BooleanArrayList.newListWith(false, false)));

        this.map.put(<(literal.(type))("0")>, false);
        Assert.assertTrue(this.map.containsAll(BooleanArrayList.newListWith(false)));
        Assert.assertTrue(this.map.containsAll(BooleanArrayList.newListWith(true, false)));

        this.map.removeKey(<(literal.(type))("5")>);
        Assert.assertFalse(this.map.containsAll(BooleanArrayList.newListWith(true)));
        Assert.assertFalse(this.map.containsAll(BooleanArrayList.newListWith(true, false)));
        Assert.assertTrue(this.map.containsAll(BooleanArrayList.newListWith(false, false)));

        this.map.removeKey(<(literal.(type))("0")>);
        Assert.assertFalse(this.map.containsAll(BooleanArrayList.newListWith(false, true)));
    }

    @Test
    public void size()
    {
        Verify.assertSize(0, this.getEmptyMap());
        Verify.assertSize(1, this.getEmptyMap().withKeyValue(<(literal.(type))("0")>, false));
        Verify.assertSize(1, this.getEmptyMap().withKeyValue(<(literal.(type))("1")>, true));

        Mutable<name>BooleanMap hashMap1 = this.newWithKeysValues(<(literal.(type))("1")>, true, <(literal.(type))("0")>, false);
        Verify.assertSize(2, hashMap1);
        hashMap1.removeKey(<(literal.(type))("1")>);
        Verify.assertSize(1, hashMap1);
        hashMap1.removeKey(<(literal.(type))("0")>);
        Verify.assertSize(0, hashMap1);

        Verify.assertSize(2, this.newWithKeysValues(<(literal.(type))("1")>, true, <(literal.(type))("5")>, false));
        Verify.assertSize(2, this.newWithKeysValues(<(literal.(type))("0")>, false, <(literal.(type))("5")>, false));
        Verify.assertSize(3, this.newWithKeysValues(<(literal.(type))("1")>, true, <(literal.(type))("0")>, true, <(literal.(type))("5")>, true));
        Verify.assertSize(2, this.newWithKeysValues(<(literal.(type))("6")>, false, <(literal.(type))("5")>, true));

        Mutable<name>BooleanMap hashMap = this.newWithKeysValues(<(literal.(type))("6")>, false, <(literal.(type))("5")>, true);
        hashMap.removeKey(<(literal.(type))("5")>);
        Verify.assertSize(1, hashMap);
    }

    @Test
    public void isEmpty()
    {
        Verify.assertEmpty(this.getEmptyMap());
        Assert.assertFalse(this.map.isEmpty());
        Assert.assertFalse(this.newWithKeysValues(<(literal.(type))("1")>, true).isEmpty());
        Assert.assertFalse(this.newWithKeysValues(<(literal.(type))("0")>, false).isEmpty());
        Assert.assertFalse(this.newWithKeysValues(<(literal.(type))("50")>, true).isEmpty());
    }

    @Test
    public void notEmpty()
    {
        Assert.assertFalse(this.getEmptyMap().notEmpty());
        Assert.assertTrue(this.map.notEmpty());
        Assert.assertTrue(this.newWithKeysValues(<(literal.(type))("1")>, false).notEmpty());
        Assert.assertTrue(this.newWithKeysValues(<(literal.(type))("0")>, true).notEmpty());
        Assert.assertTrue(this.newWithKeysValues(<(literal.(type))("50")>, false).notEmpty());
    }

    @Test
    public void withoutKey()
    {
        Mutable<name>BooleanMap map = this.newWithKeysValues(<(literal.(type))("0")>, false, <(literal.(type))("1")>, true, <(literal.(type))("31")>, false, <(literal.(type))("32")>, true);
        Mutable<name>BooleanMap mapWithout = map.withoutKey(<(literal.(type))("32")>);
        Assert.assertSame(map, mapWithout);
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("0")>, false, <(literal.(type))("1")>, true, <(literal.(type))("31")>, false), mapWithout);
    }

    @Test
    public void withoutAllKeys()
    {
        Mutable<name>BooleanMap map = this.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("1")>, false, <(literal.(type))("31")>, true, <(literal.(type))("32")>, false);
        Mutable<name>BooleanMap mapWithout = map.withoutAllKeys(<name>ArrayList.newListWith(<(literal.(type))("0")>, <(literal.(type))("32")>));
        Assert.assertSame(map, mapWithout);
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("1")>, false, <(literal.(type))("31")>, true), mapWithout);
    }

    @Test
    public void testEquals()
    {
        Mutable<name>BooleanMap map1 = this.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("1")>, false, <(literal.(type))("32")>, true);
        Mutable<name>BooleanMap map2 = this.newWithKeysValues(<(literal.(type))("32")>, true, <(literal.(type))("0")>, true, <(literal.(type))("1")>, false);
        Mutable<name>BooleanMap map3 = this.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("1")>, true, <(literal.(type))("32")>, true);
        Mutable<name>BooleanMap map4 = this.newWithKeysValues(<(literal.(type))("0")>, false, <(literal.(type))("1")>, false, <(literal.(type))("32")>, true);
        Mutable<name>BooleanMap map5 = this.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("1")>, false, <(literal.(type))("32")>, false);
        Mutable<name>BooleanMap map6 = this.newWithKeysValues(<(literal.(type))("50")>, true, <(literal.(type))("60")>, false, <(literal.(type))("70")>, false);
        Mutable<name>BooleanMap map7 = this.newWithKeysValues(<(literal.(type))("50")>, true, <(literal.(type))("60")>, false);
        Mutable<name>BooleanMap map8 = this.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("1")>, false);

        Verify.assertEqualsAndHashCode(map1, map2);
        Verify.assertPostSerializedEqualsAndHashCode(map1);
        Verify.assertPostSerializedEqualsAndHashCode(map8);
        Verify.assertPostSerializedEqualsAndHashCode(map6);
        Verify.assertPostSerializedEqualsAndHashCode(this.getEmptyMap());
        Assert.assertNotEquals(map1, map3);
        Assert.assertNotEquals(map1, map4);
        Assert.assertNotEquals(map1, map5);
        Assert.assertNotEquals(map7, map6);
        Assert.assertNotEquals(map7, map8);
    }

    @Test
    public void testHashCode()
    {
        Assert.assertEquals(
                UnifiedMap.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("1")>, false, <(literal.(type))("32")>, true).hashCode(),
                this.newWithKeysValues(<(literal.(type))("32")>, true, <(literal.(type))("0")>, true, <(literal.(type))("1")>, false).hashCode());
        Assert.assertEquals(
                UnifiedMap.newWithKeysValues(<(literal.(type))("50")>, true, <(literal.(type))("60")>, false, <(literal.(type))("70")>, false).hashCode(),
                this.newWithKeysValues(<(literal.(type))("50")>, true, <(literal.(type))("60")>, false, <(literal.(type))("70")>, false).hashCode());
        Assert.assertEquals(UnifiedMap.newMap().hashCode(), this.getEmptyMap().hashCode());
    }

    @Test
    public void testToString()
    {
        Assert.assertEquals("[]", this.getEmptyMap().toString());
        Assert.assertEquals("[<(toStringLiteral.(type))("0")>=true]", this.newWithKeysValues(<(literal.(type))("0")>, true).toString());
        Assert.assertEquals("[<(toStringLiteral.(type))("1")>=false]", this.newWithKeysValues(<(literal.(type))("1")>, false).toString());
        Assert.assertEquals("[<(toStringLiteral.(type))("5")>=false]", this.newWithKeysValues(<(literal.(type))("5")>, false).toString());

        Mutable<name>BooleanMap map1 = this.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("1")>, false);
        Assert.assertTrue(
                map1.toString(),
                "[<(toStringLiteral.(type))("0")>=true, <(toStringLiteral.(type))("1")>=false]".equals(map1.toString())
                        || "[<(toStringLiteral.(type))("1")>=false, <(toStringLiteral.(type))("0")>=true]".equals(map1.toString()));

        Mutable<name>BooleanMap map2 = this.newWithKeysValues(<(literal.(type))("1")>, false, <(literal.(type))("32")>, true);
        Assert.assertTrue(
                map2.toString(),
                "[<(toStringLiteral.(type))("1")>=false, <(toStringLiteral.(type))("32")>=true]".equals(map2.toString())
                        || "[<(toStringLiteral.(type))("32")>=true, <(toStringLiteral.(type))("1")>=false]".equals(map2.toString()));

        Mutable<name>BooleanMap map3 = this.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("32")>, true);
        Assert.assertTrue(
                map3.toString(),
                "[<(toStringLiteral.(type))("0")>=true, <(toStringLiteral.(type))("32")>=true]".equals(map3.toString())
                        || "[<(toStringLiteral.(type))("32")>=true, <(toStringLiteral.(type))("0")>=true]".equals(map3.toString()));

        Mutable<name>BooleanMap map4 = this.newWithKeysValues(<(literal.(type))("32")>, true, <(literal.(type))("33")>, false);
        Assert.assertTrue(
                map4.toString(),
                "[<(toStringLiteral.(type))("32")>=true, <(toStringLiteral.(type))("33")>=false]".equals(map4.toString())
                        || "[<(toStringLiteral.(type))("33")>=false, <(toStringLiteral.(type))("32")>=true]".equals(map4.toString()));

    }

    @Test
    public void forEach()
    {
        Mutable<name>BooleanMap map0 = this.newWithKeysValues(<(literal.(type))("0")>, false, <(literal.(type))("3")>, true);
        final String[] sum0 = {""};
        map0.forEach(new BooleanProcedure()
        {
            public void value(boolean each)
            {
                sum0[0] += each;
            }
        });
        Assert.assertTrue("truefalse".equals(sum0[0]) || "falsetrue".equals(sum0[0]));

        Mutable<name>BooleanMap map1 = this.newWithKeysValues(<(literal.(type))("1")>, true, <(literal.(type))("3")>, true);
        final String[] sum1 = {""};
        map1.forEach(new BooleanProcedure()
        {
            public void value(boolean each)
            {
                sum1[0] += each;
            }
        });
        Assert.assertEquals("truetrue", sum1[0]);

        Mutable<name>BooleanMap map01 = this.newWithKeysValues(<(literal.(type))("0")>, false, <(literal.(type))("1")>, true);
        final String[] sum01 = {""};
        map01.forEach(new BooleanProcedure()
        {
            public void value(boolean each)
            {
                sum01[0] += each;
            }
        });
        Assert.assertTrue("truefalse".equals(sum01[0]) || "falsetrue".equals(sum01[0]));

        Mutable<name>BooleanMap map = this.newWithKeysValues(<(literal.(type))("3")>, false, <(literal.(type))("4")>, false);
        final String[] sum = {""};
        map.forEach(new BooleanProcedure()
        {
            public void value(boolean each)
            {
                sum[0] += each;
            }
        });
        Assert.assertEquals("falsefalse", sum[0]);
    }

    @Test
    public void forEachValue()
    {
        Mutable<name>BooleanMap map0 = this.newWithKeysValues(<(literal.(type))("0")>, false, <(literal.(type))("3")>, true);
        final String[] sum0 = {""};
        map0.forEachValue(new BooleanProcedure()
        {
            public void value(boolean each)
            {
                sum0[0] += each;
            }
        });
        Assert.assertTrue("truefalse".equals(sum0[0]) || "falsetrue".equals(sum0[0]));

        Mutable<name>BooleanMap map1 = this.newWithKeysValues(<(literal.(type))("1")>, true, <(literal.(type))("3")>, true);
        final String[] sum1 = {""};
        map1.forEachValue(new BooleanProcedure()
        {
            public void value(boolean each)
            {
                sum1[0] += each;
            }
        });
        Assert.assertEquals("truetrue", sum1[0]);

        Mutable<name>BooleanMap map01 = this.newWithKeysValues(<(literal.(type))("0")>, false, <(literal.(type))("1")>, true);
        final String[] sum01 = {""};
        map01.forEachValue(new BooleanProcedure()
        {
            public void value(boolean each)
            {
                sum01[0] += each;
            }
        });
        Assert.assertTrue("truefalse".equals(sum01[0]) || "falsetrue".equals(sum01[0]));

        Mutable<name>BooleanMap map = this.newWithKeysValues(<(literal.(type))("3")>, false, <(literal.(type))("4")>, false);
        final String[] sum = {""};
        map.forEachValue(new BooleanProcedure()
        {
            public void value(boolean each)
            {
                sum[0] += each;
            }
        });
        Assert.assertEquals("falsefalse", sum[0]);
    }

    @Test
    public void forEachKey()
    {
        Mutable<name>BooleanMap map0 = this.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("3")>, false);
        final <type>[] sum0 = new <type>[1];
        map0.forEachKey(new <name>Procedure()
        {
            public void value(<type> each)
            {
                sum0[0] += each;
            }
        });
        Assert.assertEquals(<(literal.(type))("3")>, sum0[0]<delta.(type)>);

        Mutable<name>BooleanMap map1 = this.newWithKeysValues(<(literal.(type))("1")>, false, <(literal.(type))("3")>, false);
        final <type>[] sum1 = new <type>[1];
        map1.forEachKey(new <name>Procedure()
        {
            public void value(<type> each)
            {
                sum1[0] += each;
            }
        });
        Assert.assertEquals(<(literal.(type))("4")>, sum1[0]<delta.(type)>);

        Mutable<name>BooleanMap map01 = this.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("1")>, true);
        final <type>[] sum01 = new <type>[1];
        map01.forEachKey(new <name>Procedure()
        {
            public void value(<type> each)
            {
                sum01[0] += each;
            }
        });
        Assert.assertEquals(<(literal.(type))("1")>, sum01[0]<delta.(type)>);

        Mutable<name>BooleanMap map = this.newWithKeysValues(<(literal.(type))("3")>, false, <(literal.(type))("4")>, true);
        final <type>[] sum = new <type>[1];
        map.forEachKey(new <name>Procedure()
        {
            public void value(<type> each)
            {
                sum[0] += each;
            }
        });
        Assert.assertEquals(7, sum[0]<delta.(type)>);
    }

    @Test
    public void forEachKeyValue()
    {
        Mutable<name>BooleanMap map0 = this.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("3")>, true);
        final <type>[] sumKey0 = new <type>[1];
        final String[] sumValue0 = {""};
        map0.forEachKeyValue(new <name>BooleanProcedure()
        {
            public void value(<type> eachKey, boolean eachValue)
            {
                sumKey0[0] += eachKey;
                sumValue0[0] += eachValue;
            }
        });
        Assert.assertEquals(<(literal.(type))("3")>, sumKey0[0]<delta.(type)>);
        Assert.assertEquals("truetrue", sumValue0[0]);

        Mutable<name>BooleanMap map1 = this.newWithKeysValues(<(literal.(type))("1")>, true, <(literal.(type))("3")>, false);
        final <type>[] sumKey1 = new <type>[1];
        final String[] sumValue1 = {""};
        map1.forEachKeyValue(new <name>BooleanProcedure()
        {
            public void value(<type> eachKey, boolean eachValue)
            {
                sumKey1[0] += eachKey;
                sumValue1[0] += eachValue;
            }
        });
        Assert.assertEquals(<(literal.(type))("4")>, sumKey1[0]<delta.(type)>);
        Assert.assertTrue("truefalse".equals(sumValue1[0]) || "falsetrue".equals(sumValue1[0]));

        Mutable<name>BooleanMap map01 = this.newWithKeysValues(<(literal.(type))("0")>, false, <(literal.(type))("1")>, false);
        final <type>[] sumKey01 = new <type>[1];
        final String[] sumValue01 = {""};
        map01.forEachKeyValue(new <name>BooleanProcedure()
        {
            public void value(<type> eachKey, boolean eachValue)
            {
                sumKey01[0] += eachKey;
                sumValue01[0] += eachValue;
            }
        });
        Assert.assertEquals(<(literal.(type))("1")>, sumKey01[0]<delta.(type)>);
        Assert.assertEquals("falsefalse", sumValue01[0]);

        Mutable<name>BooleanMap map = this.newWithKeysValues(<(literal.(type))("3")>, false, <(literal.(type))("4")>, true);
        final <type>[] sumKey = new <type>[1];
        final String[] sumValue = {""};
        map.forEachKeyValue(new <name>BooleanProcedure()
        {
            public void value(<type> eachKey, boolean eachValue)
            {
                sumKey[0] += eachKey;
                sumValue[0] += eachValue;
            }
        });
        Assert.assertEquals(7, sumKey[0]<delta.(type)>);
        Assert.assertTrue("truefalse".equals(sumValue[0]) || "falsetrue".equals(sumValue[0]));
    }

    @Test
    public void makeString()
    {
        Assert.assertEquals("", this.getEmptyMap().makeString());
        Assert.assertEquals("<(toStringLiteral.(type))("0")>=true", this.newWithKeysValues(<(literal.(type))("0")>, true).makeString());
        Assert.assertEquals("<(toStringLiteral.(type))("1")>=false", this.newWithKeysValues(<(literal.(type))("1")>, false).makeString());
        Assert.assertEquals("<(toStringLiteral.(type))("5")>=false", this.newWithKeysValues(<(literal.(type))("5")>, false).makeString());

        Mutable<name>BooleanMap map1 = this.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("1")>, false);
        Assert.assertTrue(
                map1.makeString(),
                "<(toStringLiteral.(type))("0")>=true, <(toStringLiteral.(type))("1")>=false".equals(map1.makeString())
                        || "<(toStringLiteral.(type))("1")>=false, <(toStringLiteral.(type))("0")>=true".equals(map1.makeString()));

        Mutable<name>BooleanMap map2 = this.newWithKeysValues(<(literal.(type))("1")>, false, <(literal.(type))("32")>, true);
        Assert.assertTrue(
                map2.makeString("[", "/", "]"),
                "[<(toStringLiteral.(type))("1")>=false/<(toStringLiteral.(type))("32")>=true]".equals(map2.makeString("[", "/", "]"))
                        || "[<(toStringLiteral.(type))("32")>=true/<(toStringLiteral.(type))("1")>=false]".equals(map2.makeString("[", "/", "]")));

        Mutable<name>BooleanMap map3 = this.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("32")>, true);
        Assert.assertTrue(
                map3.makeString("~"),
                "<(toStringLiteral.(type))("0")>=true~<(toStringLiteral.(type))("32")>=true".equals(map3.makeString("~"))
                        || "<(toStringLiteral.(type))("32")>=true~<(toStringLiteral.(type))("0")>=true".equals(map3.makeString("~")));

        Mutable<name>BooleanMap map4 = this.newWithKeysValues(<(literal.(type))("32")>, true, <(literal.(type))("33")>, false);
        Assert.assertTrue(
                map4.makeString("[", ", ", "]"),
                "[<(toStringLiteral.(type))("32")>=true, <(toStringLiteral.(type))("33")>=false]".equals(map4.makeString("[", ", ", "]"))
                        || "[<(toStringLiteral.(type))("33")>=false, <(toStringLiteral.(type))("32")>=true]".equals(map4.makeString("[", ", ", "]")));
    }

    @Test
    public void appendString()
    {
        Appendable appendable = new StringBuilder();
        this.getEmptyMap().appendString(appendable);
        Assert.assertEquals("", appendable.toString());

        Appendable appendable0 = new StringBuilder();
        this.newWithKeysValues(<(literal.(type))("0")>, true).appendString(appendable0);
        Assert.assertEquals("<(toStringLiteral.(type))("0")>=true", appendable0.toString());

        Appendable appendable1 = new StringBuilder();
        this.newWithKeysValues(<(literal.(type))("1")>, false).appendString(appendable1);
        Assert.assertEquals("<(toStringLiteral.(type))("1")>=false", appendable1.toString());

        Appendable appendable2 = new StringBuilder();
        this.newWithKeysValues(<(literal.(type))("5")>, false).appendString(appendable2);
        Assert.assertEquals("<(toStringLiteral.(type))("5")>=false", appendable2.toString());

        Appendable appendable3 = new StringBuilder();
        Mutable<name>BooleanMap map1 = this.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("1")>, false);
        map1.appendString(appendable3);
        Assert.assertTrue(
                appendable3.toString(),
                "<(toStringLiteral.(type))("0")>=true, <(toStringLiteral.(type))("1")>=false".equals(appendable3.toString())
                        || "<(toStringLiteral.(type))("1")>=false, <(toStringLiteral.(type))("0")>=true".equals(appendable3.toString()));

        Appendable appendable4 = new StringBuilder();
        Mutable<name>BooleanMap map2 = this.newWithKeysValues(<(literal.(type))("1")>, false, <(literal.(type))("32")>, true);
        map2.appendString(appendable4, "[", "/", "]");
        Assert.assertTrue(
                appendable4.toString(),
                "[<(toStringLiteral.(type))("1")>=false/<(toStringLiteral.(type))("32")>=true]".equals(appendable4.toString())
                        || "[<(toStringLiteral.(type))("32")>=true/<(toStringLiteral.(type))("1")>=false]".equals(appendable4.toString()));

        Appendable appendable5 = new StringBuilder();
        Mutable<name>BooleanMap map3 = this.newWithKeysValues(<(literal.(type))("1")>, false, <(literal.(type))("32")>, true);
        map3.appendString(appendable5, "[", "/", "]");
        Assert.assertTrue(
                appendable5.toString(),
                "[<(toStringLiteral.(type))("1")>=false/<(toStringLiteral.(type))("32")>=true]".equals(appendable5.toString())
                        || "[<(toStringLiteral.(type))("32")>=true/<(toStringLiteral.(type))("1")>=false]".equals(appendable5.toString()));

        Appendable appendable6 = new StringBuilder();
        map1.appendString(appendable6, "/");
        Assert.assertTrue(
                appendable6.toString(),
                "<(toStringLiteral.(type))("0")>=true/<(toStringLiteral.(type))("1")>=false".equals(appendable6.toString())
                        || "<(toStringLiteral.(type))("1")>=false/<(toStringLiteral.(type))("0")>=true".equals(appendable6.toString()));
                        
    }

    @Test
    public void withKeysValues()
    {
        Mutable<name>BooleanMap hashMap = this.getEmptyMap();
        Assert.assertSame(hashMap.withKeyValue(<(literal.(type))("1")>, false), hashMap);
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("1")>, false), hashMap);
    }

    @Test
    public void select()
    {
        <name>BooleanMap map = this.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("1")>, false, <(literal.(type))("2")>, false, <(literal.(type))("3")>, true);
        <name>BooleanMap actual1 = map.select(new <name>BooleanPredicate()
        {
            public boolean accept(<type> key, boolean value)
            {
                return <(equals.(type))("key", {<(literal.(type))("1")>})> || value;
            }
        });
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("1")>, false, <(literal.(type))("3")>, true, <(literal.(type))("0")>, true), actual1);
        <name>BooleanMap actual2 = map.select(new <name>BooleanPredicate()
        {
            public boolean accept(<type> key, boolean value)
            {
                return <(equals.(type))("key", {<(literal.(type))("0")>})> || !value;
            }
        });
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("2")>, false, <(literal.(type))("1")>, false), actual2);
    }

    @Test
    public void reject()
    {
        <name>BooleanMap map = this.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("1")>, false, <(literal.(type))("2")>, false, <(literal.(type))("3")>, true);
        <name>BooleanMap actual1 = map.reject(new <name>BooleanPredicate()
        {
            public boolean accept(<type> key, boolean value)
            {
                return <(equals.(type))("key", {<(literal.(type))("2")>})> || !value;
            }
        });
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("3")>, true), actual1);
        <name>BooleanMap actual2 = map.reject(new <name>BooleanPredicate()
        {
            public boolean accept(<type> key, boolean value)
            {
                return <(equals.(type))("key", {<(literal.(type))("3")>})> || value;
            }
        });
        Assert.assertEquals(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("1")>, false, <(literal.(type))("2")>, false), actual2);
    }

    @Test
    public void select_value()
    {
        <name>BooleanMap map = this.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("1")>, false, <(literal.(type))("2")>, true, <(literal.(type))("3")>, false);
        BooleanIterable actual1 = map.select(BooleanPredicates.isTrue());
        Assert.assertEquals(BooleanArrayList.newListWith(true, true), actual1);
        BooleanIterable actual2 = map.select(BooleanPredicates.isFalse());
        Assert.assertEquals(BooleanArrayList.newListWith(false, false), actual2);
    }

    @Test
    public void reject_value()
    {
        <name>BooleanMap map = this.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("1")>, false, <(literal.(type))("2")>, true, <(literal.(type))("3")>, false);
        BooleanIterable actual1 = map.reject(BooleanPredicates.isTrue());
        Assert.assertEquals(BooleanArrayList.newListWith(false, false), actual1);
        BooleanIterable actual2 = map.reject(BooleanPredicates.isFalse());
        Assert.assertEquals(BooleanArrayList.newListWith(true, true), actual2);
    }

    @Test
    public void collect()
    {
        <name>BooleanMap map = this.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("1")>, false, <(literal.(type))("2")>, true);

        RichIterable\<Boolean> objects = map.collect(new BooleanToObjectFunction\<Boolean>()
        {
            public Boolean valueOf(boolean booleanParameter)
            {
                return !booleanParameter;
            }
        });

        Assert.assertEquals(HashBag.newBagWith(false, true, false), objects.toBag());
    }

    @Test
    public void count()
    {
        <name>BooleanMap map = this.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("1")>, false, <(literal.(type))("2")>, true);
        Assert.assertEquals(2, map.count(BooleanPredicates.isTrue()));
        Assert.assertEquals(1, map.count(BooleanPredicates.isFalse()));
    }

    @Test
    public void detectIfNone_value()
    {
        <name>BooleanMap map = this.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("1")>, false, <(literal.(type))("2")>, false);
        <name>BooleanMap map2 = this.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("1")>, true, <(literal.(type))("2")>, false);
        boolean resultNotFound = map.detectIfNone(BooleanPredicates.and(BooleanPredicates.isTrue(), BooleanPredicates.isFalse()), true);
        Assert.assertTrue(resultNotFound);
        boolean resultNotFound2 = map.detectIfNone(BooleanPredicates.and(BooleanPredicates.isTrue(), BooleanPredicates.isFalse()), false);
        Assert.assertFalse(resultNotFound2);

        Assert.assertTrue(map.detectIfNone(BooleanPredicates.isTrue(), false));
        Assert.assertFalse(map.detectIfNone(BooleanPredicates.isFalse(), true));
        Assert.assertFalse(map2.detectIfNone(BooleanPredicates.isFalse(), true));
    }

    @Test
    public void anySatisfy()
    {
        Assert.assertTrue(this.map.anySatisfy(BooleanPredicates.isTrue()));
        Assert.assertTrue(this.map.anySatisfy(BooleanPredicates.isFalse()));
        Assert.assertTrue(this.newWithKeysValues(<(literal.(type))("1")>, false, <(literal.(type))("2")>, true).anySatisfy(BooleanPredicates.isFalse()));
        Assert.assertFalse(this.map.anySatisfy(BooleanPredicates.and(BooleanPredicates.isTrue(), BooleanPredicates.isFalse())));
    }

    @Test
    public void allSatisfy()
    {
        Assert.assertFalse(this.map.allSatisfy(BooleanPredicates.isTrue()));
        Assert.assertFalse(this.map.allSatisfy(BooleanPredicates.isFalse()));
        Assert.assertFalse(this.newWithKeysValues(<(literal.(type))("1")>, true, <(literal.(type))("2")>, false).allSatisfy(BooleanPredicates.isFalse()));
        Assert.assertTrue(this.map.allSatisfy(BooleanPredicates.or(BooleanPredicates.isTrue(), BooleanPredicates.isFalse())));
    }

    @Test
    public void noneSatisfy()
    {
        Assert.assertFalse(this.map.noneSatisfy(BooleanPredicates.isTrue()));
        Assert.assertFalse(this.map.noneSatisfy(BooleanPredicates.isFalse()));
        Assert.assertFalse(this.newWithKeysValues(<(literal.(type))("1")>, false, <(literal.(type))("2")>, true).noneSatisfy(BooleanPredicates.isFalse()));
        Assert.assertTrue(this.map.noneSatisfy(BooleanPredicates.and(BooleanPredicates.isTrue(), BooleanPredicates.isFalse())));
    }

    @Test
    public void toList()
    {
        Assert.assertEquals(BooleanArrayList.newListWith(true), this.newWithKeysValues(<(literal.(type))("0")>, true).toList());
        Assert.assertEquals(BooleanArrayList.newListWith(false), this.newWithKeysValues(<(literal.(type))("1")>, false).toList());
        Assert.assertEquals(BooleanArrayList.newListWith(true), this.newWithKeysValues(<(literal.(type))("2")>, true).toList());
    }

    @Test
    public void toSet()
    {
        <name>BooleanMap map = this.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("1")>, false, <(literal.(type))("2")>, true, <(literal.(type))("3")>, false);
        Assert.assertEquals(BooleanHashSet.newSetWith(true, false), map.toSet());
    }

    @Test
    public void toBag()
    {
        <name>BooleanMap map = this.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("1")>, false, <(literal.(type))("2")>, true, <(literal.(type))("3")>, false);
        Assert.assertEquals(BooleanHashBag.newBagWith(true, false, true, false), map.toBag());
    }

    @Test
    public void booleanIterator()
    {
        MutableBooleanBag expected = BooleanHashBag.newBagWith(true, false, true);
        MutableBooleanBag actual = BooleanHashBag.newBagWith();

        final BooleanIterator iterator = this.map.booleanIterator();
        Assert.assertTrue(iterator.hasNext());
        actual.add(iterator.next());
        Assert.assertTrue(iterator.hasNext());
        actual.add(iterator.next());
        Assert.assertTrue(iterator.hasNext());
        actual.add(iterator.next());
        Assert.assertFalse(iterator.hasNext());

        Assert.assertEquals(expected, actual);
        Verify.assertThrows(NoSuchElementException.class, new Runnable()
        {
            public void run()
            {
                iterator.next();
            }
        });

        Verify.assertThrows(NoSuchElementException.class, new Runnable()
        {
            public void run()
            {
                Abstract<name>BooleanMapTestCase.this.getEmptyMap().booleanIterator().next();
            }
        });
    }

    @Test
    public void asSynchronized()
    {
        Verify.assertInstanceOf(Synchronized<name>BooleanMap.class, this.map.asSynchronized());
        Assert.assertEquals(new Synchronized<name>BooleanMap(this.map), this.map.asSynchronized());
    }

    @Test
    public void asUnmodifiable()
    {
        Verify.assertInstanceOf(Unmodifiable<name>BooleanMap.class, this.map.asUnmodifiable());
        Assert.assertEquals(new Unmodifiable<name>BooleanMap(this.map), this.map.asUnmodifiable());
    }

    @Test
    public void asLazy()
    {
        Mutable<name>BooleanMap map = this.newWithKeysValues(<(literal.(type))("1")>, true, <(literal.(type))("2")>, true, <(literal.(type))("3")>, false);
        LazyBooleanIterable lazy = map.asLazy();
        Assert.assertTrue(lazy.toList().containsAll(true, true, false));
    }

    @Test
    public void keysView()
    {
        Mutable<name>List keys = this.newWithKeysValues(<(literal.(type))("1")>, true, <(literal.(type))("2")>, false).keysView().toSortedList();
        Assert.assertEquals(<name>ArrayList.newListWith(<(literal.(type))("1")>, <(literal.(type))("2")>), keys);
    }

    @Test
    public void toArray()
    {
        Mutable<name>BooleanMap map = this.newWithKeysValues(<(literal.(type))("1")>, false, <(literal.(type))("2")>, true);
        boolean[] array = map.toArray();
        Assert.assertTrue(Arrays.equals(new boolean[]{false, true}, array)
                || Arrays.equals(new boolean[]{true, false}, array));
    }
}

>>
