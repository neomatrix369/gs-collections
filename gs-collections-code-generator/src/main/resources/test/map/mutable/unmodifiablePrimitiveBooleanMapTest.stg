import "copyright.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"
import "primitiveEquals.stg"

skipBoolean() ::= "true"

isTest() ::= "true"

targetPath() ::= "com/gs/collections/impl/map/mutable/primitive"

fileName(primitive) ::= "Unmodifiable<primitive.name>BooleanMapTest"

class(primitive) ::= <<
<body(primitive.type, primitive.name)>
>>

body(type, name) ::= <<
<copyright()>

package com.gs.collections.impl.map.mutable.primitive;

import com.gs.collections.api.block.function.primitive.BooleanFunction;
import com.gs.collections.api.block.function.primitive.BooleanFunction0;
import com.gs.collections.api.block.function.primitive.BooleanToBooleanFunction;
import com.gs.collections.api.block.function.primitive.<name>ToBooleanFunction;
import com.gs.collections.impl.list.mutable.primitive.BooleanArrayList;
import com.gs.collections.impl.list.mutable.primitive.<name>ArrayList;
import com.gs.collections.impl.test.Verify;
import org.junit.Assert;
import org.junit.Test;

/**
 * JUnit test for {@link Unmodifiable<name>BooleanMap}.
 * This file was automatically generated from template file unmodifiablePrimitiveBooleanMapTest.stg.
 */
public class Unmodifiable<name>BooleanMapTest extends Abstract<name>BooleanMapTestCase
{
    private final Unmodifiable<name>BooleanMap map = this.classUnderTest();

    @Override
    protected Unmodifiable<name>BooleanMap classUnderTest()
    {
        return new Unmodifiable<name>BooleanMap(<name>BooleanHashMap.newWithKeysValues(<(literal.(type))("0")>, true, <(literal.(type))("31")>, false, <(literal.(type))("32")>, true));
    }

    @Override
    protected Unmodifiable<name>BooleanMap newWithKeysValues(<type> key1, boolean value1)
    {
        return new Unmodifiable<name>BooleanMap(new <name>BooleanHashMap(1).withKeyValue(key1, value1));
    }

    @Override
	protected Unmodifiable<name>BooleanMap newWithKeysValues(<type> key1, boolean value1, <type> key2, boolean value2)
    {
        return new Unmodifiable<name>BooleanMap(new <name>BooleanHashMap(2).withKeysValues(key1, value1, key2, value2));
    }

    @Override
	protected Unmodifiable<name>BooleanMap newWithKeysValues(<type> key1, boolean value1, <type> key2, boolean value2, <type> key3, boolean value3)
    {
        return new Unmodifiable<name>BooleanMap(new <name>BooleanHashMap(3).withKeysValues(key1, value1, key2, value2, key3, value3));
    }

    @Override
	protected Unmodifiable<name>BooleanMap newWithKeysValues(<type> key1, boolean value1, <type> key2, boolean value2, <type> key3, boolean value3, <type> key4, boolean value4)
    {
        return new Unmodifiable<name>BooleanMap(new <name>BooleanHashMap(4).withKeysValues(key1, value1, key2, value2, key3, value3, key4, value4));
    }

    @Override
	protected Unmodifiable<name>BooleanMap getEmptyMap()
    {
        return new Unmodifiable<name>BooleanMap(new <name>BooleanHashMap());
    }

    @Override
    @Test(expected = UnsupportedOperationException.class)
    public void clear()
    {
        this.map.clear();
    }

    @Override
    @Test(expected = UnsupportedOperationException.class)
    public void removeKey()
    {
        this.map.removeKey(<(literal.(type))("5")>);
    }

    @Override
    @Test
    public void removeKeyIfAbsent()
    {
        Assert.assertTrue(this.map.removeKeyIfAbsent(<(literal.(type))("10")>, true));
    }

    @Test(expected = UnsupportedOperationException.class)
    public void removeKeyIfAbsentThrowsException()
    {
        this.map.removeKeyIfAbsent(<(literal.(type))("0")>, true);
    }

    @Override
    @Test(expected = UnsupportedOperationException.class)
    public void put()
    {
        this.map.put(<(literal.(type))("0")>, true);
    }

    @Override
    @Test(expected = UnsupportedOperationException.class)
    public void withKeysValues()
    {
        this.map.withKeyValue(<(literal.(type))("1")>, true);
    }

    @Override
    @Test(expected = UnsupportedOperationException.class)
    public void withoutKey()
    {
        this.map.withoutKey(<(literal.(type))("32")>);
    }

    @Override
    @Test(expected = UnsupportedOperationException.class)
    public void withoutAllKeys()
    {
        this.map.withoutAllKeys(<name>ArrayList.newListWith(<(literal.(type))("0")>, <(literal.(type))("32")>));
    }

    @Override
    @Test(expected = UnsupportedOperationException.class)
    public void putDuplicateWithRemovedSlot()
    {
        <type> collision1 = Abstract<name>BooleanMapTestCase.generateCollisions().getFirst();

        Unmodifiable<name>BooleanMap hashMap = this.getEmptyMap();
        hashMap.put(collision1, true);
    }

    @Override
    @Test
    public void get()
    {
        Assert.assertTrue(this.map.get(<(literal.(type))("0")>));
        Assert.assertFalse(this.map.get(<(literal.(type))("31")>));
        Assert.assertTrue(this.map.get(<(literal.(type))("32")>));

        Assert.assertFalse(this.map.get(<(literal.(type))("1")>));
        Assert.assertFalse(this.map.get(<(literal.(type))("33")>));
    }

    @Override
    @Test
    public void getIfAbsent()
    {
        Assert.assertTrue(this.map.getIfAbsent(<(literal.(type))("0")>, false));
        Assert.assertFalse(this.map.getIfAbsent(<(literal.(type))("31")>, true));
        Assert.assertTrue(this.map.getIfAbsent(<(literal.(type))("32")>, false));

        Assert.assertFalse(this.map.getIfAbsent(<(literal.(type))("1")>, false));
        Assert.assertTrue(this.map.getIfAbsent(<(literal.(type))("1")>, true));
    }

    @Override
    @Test
    public void getOrThrow()
    {
        Assert.assertTrue(this.map.getOrThrow(<(literal.(type))("0")>));
        Assert.assertFalse(this.map.getOrThrow(<(literal.(type))("31")>));
        Assert.assertTrue(this.map.getOrThrow(<(literal.(type))("32")>));

        Verify.assertThrows(IllegalStateException.class, new Runnable()
        {
            public void run()
            {
                Unmodifiable<name>BooleanMapTest.this.map.getOrThrow(<(literal.(type))("33")>);
            }
        });
    }

    @Override
    @Test
    public void getIfAbsentPut()
    {
        Assert.assertTrue(this.map.getIfAbsentPut(<(literal.(type))("0")>, false));
    }

    @Test(expected = UnsupportedOperationException.class)
    public void getIfAbsentPutThrowsException()
    {
        this.map.getIfAbsentPut(<(literal.(type))("10")>, true);
    }

    @Override
    @Test
    public void getIfAbsentPut_Function()
    {
        BooleanFunction0 factory = new BooleanFunction0()
        {
            public boolean value()
            {
                return true;
            }
        };

        Assert.assertTrue(this.map.getIfAbsentPut(<(literal.(type))("0")>, factory));
    }

    @Test(expected = UnsupportedOperationException.class)
    public void getIfAbsentPut_FunctionThrowsException()
    {
        BooleanFunction0 factory = new BooleanFunction0()
        {
            public boolean value()
            {
                return true;
            }
        };

        this.map.getIfAbsentPut(<(literal.(type))("10")>, factory);
    }

    @Override
    @Test
    public void getIfAbsentPutWith()
    {
        BooleanFunction\<String> functionLengthEven = new BooleanFunction\<String>()
        {
            public boolean booleanValueOf(String string)
            {
                return (string.length() & 1) == <(literal.(type))("0")>;
            }
        };

        Assert.assertTrue(this.map.getIfAbsentPutWith(<(literal.(type))("0")>, functionLengthEven, "12345678"));
    }

    @Test(expected = UnsupportedOperationException.class)
    public void getIfAbsentPutWithThrowsException()
    {
        BooleanFunction\<String> functionLengthEven = new BooleanFunction\<String>()
        {
            public boolean booleanValueOf(String string)
            {
                return (string.length() & 1) == <(literal.(type))("0")>;
            }
        };

        this.map.getIfAbsentPutWith(<(literal.(type))("10")>, functionLengthEven, "unused");
    }

    @Override
    @Test
    public void getIfAbsentPutWithKey()
    {
        <name>ToBooleanFunction keyIsEven = new <name>ToBooleanFunction()
        {
            public boolean valueOf(<type> parameter)
            {
                return (<(castRealTypeToInt.(type))("parameter")> & 1) == <(literal.(type))("0")>;
            }
        };

        Assert.assertTrue(this.map.getIfAbsentPutWithKey(<(literal.(type))("0")>, keyIsEven));
    }

    @Test(expected = UnsupportedOperationException.class)
    public void getIfAbsentPutWithKeyThrowsException()
    {
        <name>ToBooleanFunction keyIsEven = new <name>ToBooleanFunction()
        {
            public boolean valueOf(<type> parameter)
            {
                return (<(castRealTypeToInt.(type))("parameter")> & 1) == <(literal.(type))("0")>;
            }
        };

        this.map.getIfAbsentPutWithKey(<(literal.(type))("10")>, keyIsEven);
    }

    @Override
    @Test(expected = UnsupportedOperationException.class)
    public void updateValue()
    {
        BooleanToBooleanFunction flip = new BooleanToBooleanFunction()
        {
            public boolean valueOf(boolean value)
            {
                return !value;
            }
        };

        this.map.updateValue(<(literal.(type))("0")>, false, flip);
    }

    @Override
    @Test
    public void contains()
    {
        Assert.assertTrue(this.map.contains(true));
        Assert.assertTrue(this.map.contains(false));
        Assert.assertFalse(this.getEmptyMap().contains(false));
    }

    @Override
    @Test
    public void containsKey()
    {
        Assert.assertTrue(this.map.containsKey(<(literal.(type))("0")>));
        Assert.assertTrue(this.map.containsKey(<(literal.(type))("31")>));
        Assert.assertTrue(this.map.containsKey(<(literal.(type))("32")>));
        Assert.assertFalse(this.map.containsKey(<(literal.(type))("1")>));
        Assert.assertFalse(this.map.containsKey(<(literal.(type))("5")>));
        Assert.assertFalse(this.map.containsKey(<(literal.(type))("35")>));
    }

    @Override
    @Test
    public void containsValue()
    {
        Assert.assertTrue(this.map.containsValue(true));
        Assert.assertTrue(this.map.containsValue(false));
        Assert.assertFalse(this.getEmptyMap().containsValue(false));
    }

    @Override
    @Test
    public void containsAll()
    {
        Assert.assertTrue(this.map.containsAll(true, false));
        Assert.assertTrue(this.map.containsAll(true, true));
        Assert.assertTrue(this.map.containsAll(false, false));
        Assert.assertFalse(this.getEmptyMap().containsAll(false, true));
    }

    @Override
    @Test
    public void containsAllIterable()
    {
        Assert.assertTrue(this.map.containsAll(BooleanArrayList.newListWith(true, false)));
        Assert.assertTrue(this.map.containsAll(BooleanArrayList.newListWith(true, true)));
        Assert.assertTrue(this.map.containsAll(BooleanArrayList.newListWith(false, false)));
        Assert.assertFalse(this.getEmptyMap().containsAll(BooleanArrayList.newListWith(false, false)));
    }

    @Override
    @Test
    public void size()
    {
        Verify.assertSize(0, this.getEmptyMap());
        Verify.assertSize(1, this.newWithKeysValues(<(literal.(type))("0")>, false));
        Verify.assertSize(1, this.newWithKeysValues(<(literal.(type))("1")>, true));
        Verify.assertSize(3, this.map);
    }

    @Override
    @Test
    public void asUnmodifiable()
    {
        super.asUnmodifiable();
        Assert.assertSame(this.map, this.map.asUnmodifiable());
    }

}

>>
