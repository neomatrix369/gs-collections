import "copyright.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"

isTest() ::= "true"

targetPath() ::= "com/gs/collections/impl/stack/mutable/primitive"

fileName(primitive) ::= "Unmodifiable<primitive.name>StackTest"

class(primitive) ::= <<
<body(primitive.type, primitive.wrapperName, primitive.name)>
>>

body(type, wrapperName, name) ::= <<
<copyright()>

package com.gs.collections.impl.stack.mutable.primitive;

import java.util.EmptyStackException;
import java.util.NoSuchElementException;

import com.gs.collections.api.block.function.primitive.<name>ToObjectFunction;
import com.gs.collections.api.block.procedure.primitive.<name>Procedure;
import com.gs.collections.api.iterator.<name>Iterator;
import com.gs.collections.api.stack.primitive.Mutable<name>Stack;
import com.gs.collections.impl.bag.mutable.primitive.<name>HashBag;
import com.gs.collections.impl.block.factory.primitive.<name>Predicates;
import com.gs.collections.impl.list.mutable.primitive.<name>ArrayList;
import com.gs.collections.impl.set.mutable.primitive.<name>HashSet;
import com.gs.collections.impl.stack.mutable.ArrayStack;
import com.gs.collections.impl.test.Verify;
import org.junit.Assert;
import org.junit.Test;

/**
 * This file was automatically generated from template file unmodifiablePrimitiveStackTest.stg.
 */
public class Unmodifiable<name>StackTest
{
    private final Mutable<name>Stack stack = new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">));
    
    @Test(expected = UnsupportedOperationException.class)
    public void push()
    {
        this.stack.push(<(literal.(type))("5")>);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void pop()
    {
        this.stack.pop();
    }

    @Test(expected = UnsupportedOperationException.class)
    public void popWithCount()
    {
        this.stack.pop(2);
    }

    @Test
    public void peek()
    {
        Verify.assertSize(3, this.stack);
        Assert.assertEquals(<(wideLiteral.(type))("3")>, this.stack.peek()<(wideDelta.(type))>);
    }

    @Test
    public void peekWithCount()
    {
        Verify.assertSize(3, this.stack);
        Assert.assertEquals(<name>ArrayList.newListWith(<["3", "2"]:(literal.(type))(); separator=", ">), this.stack.peek(2));
        Assert.assertEquals(new <name>ArrayList(), this.stack.peek(0));
    }

    @Test
    public void peekAtIndex()
    {
        Mutable<name>Stack stack1 = new Unmodifiable<name>Stack(<name>ArrayStack.newStackFromTopToBottom(<["1", "2", "3", "4" ,"5"]:(literal.(type))(); separator=", ">));
        Verify.assertSize(5, stack1);
        Assert.assertEquals(<(wideLiteral.(type))("1")>, stack1.peekAt(0)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("2")>, stack1.peekAt(1)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("3")>, stack1.peekAt(2)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("4")>, stack1.peekAt(3)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("5")>, stack1.peekAt(4)<(wideDelta.(type))>);
        Mutable<name>Stack stack2 = new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["5", "4", "3", "2" ,"1"]:(literal.(type))(); separator=", ">));
        Verify.assertSize(5, stack2);
        Assert.assertEquals(<(wideLiteral.(type))("1")>, stack2.peekAt(0)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("2")>, stack2.peekAt(1)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("3")>, stack2.peekAt(2)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("4")>, stack2.peekAt(3)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("5")>, stack2.peekAt(4)<(wideDelta.(type))>);
    }

    @Test(expected = EmptyStackException.class)
    public void peek_empty_stack_throws_exception()
    {
        new Unmodifiable<name>Stack(new <name>ArrayStack()).peek();
    }

    @Test(expected = IllegalArgumentException.class)
    public void peek_at_index_less_than_zero_throws_exception()
    {
        new Unmodifiable<name>Stack(<name>ArrayStack.newStackFromTopToBottom(<["1", "2", "3", "4" ,"5"]:(literal.(type))(); separator=", ">)).peek(-1);
    }

    @Test(expected = IllegalArgumentException.class)
    public void peek_at_index_greater_than_size_throws_exception()
    {
        new Unmodifiable<name>Stack(<name>ArrayStack.newStackFromTopToBottom(<(literal.(type))("1")>)).peekAt(1);
    }
    
    @Test
    public void newStackWith()
    {
        Verify.assertSize(3, this.stack);
        Assert.assertTrue(this.stack.containsAll(<["1", "2", "3"]:(literal.(type))(); separator=", ">));
    }

    @Test
    public void newStack()
    {
        Assert.assertEquals(<name>ArrayStack.newStackWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">), this.stack);
    }
    
    @Test
    public void isEmpty()
    {
        Verify.assertEmpty(new Unmodifiable<name>Stack(new <name>ArrayStack()));
        Verify.assertNotEmpty(this.stack);
    }

    @Test
    public void notEmpty()
    {
        Assert.assertFalse(new Unmodifiable<name>Stack(new <name>ArrayStack()).notEmpty());
        Assert.assertTrue(this.stack.notEmpty());
    }

    @Test(expected = UnsupportedOperationException.class)
    public void clear()
    {
        this.stack.clear();
    }

    @Test
    public void containsAllArray()
    {
        Assert.assertTrue(this.stack.contains(<(literal.(type))("1")>));
        Assert.assertFalse(this.stack.contains(<(literal.(type))("10")>));
        Assert.assertTrue(this.stack.containsAll(<(literal.(type))("1")>));
        Assert.assertTrue(this.stack.containsAll(<["1", "2", "3"]:(literal.(type))(); separator=", ">));
        Assert.assertFalse(this.stack.containsAll(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">));
        Assert.assertFalse(this.stack.containsAll(<["1", "2", "4"]:(literal.(type))(); separator=", ">));
        Assert.assertFalse(this.stack.containsAll(<["4", "5", "6"]:(literal.(type))(); separator=", ">));
    }

    @Test
    public void containsAllIterable()
    {
        Assert.assertTrue(new Unmodifiable<name>Stack(new <name>ArrayStack()).containsAll(new <name>ArrayList()));
        Assert.assertFalse(new Unmodifiable<name>Stack(new <name>ArrayStack()).containsAll(<name>ArrayList.newListWith(<(literal.(type))("1")>)));
        Assert.assertTrue(this.stack.containsAll(<name>ArrayList.newListWith(<(literal.(type))("1")>)));
        Assert.assertTrue(this.stack.containsAll(<name>ArrayList.newListWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">)));
        Assert.assertFalse(this.stack.containsAll(<name>ArrayList.newListWith(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">)));
        Assert.assertFalse(this.stack.containsAll(<name>ArrayList.newListWith(<["1", "2", "4"]:(literal.(type))(); separator=", ">)));
        Assert.assertFalse(this.stack.containsAll(<name>ArrayList.newListWith(<["4", "5", "6"]:(literal.(type))(); separator=", ">)));
    }

    @Test
    public void iterator()
    {
        <name>ArrayStack stack = <name>ArrayStack.newStackFromTopToBottom(<["1", "2", "3", "4", "5"]:(literal.(type))(); separator=", ">);
        <name>Iterator iterator = stack.<type>Iterator();
        Assert.assertTrue(iterator.hasNext());
        Assert.assertEquals(<(wideLiteral.(type))("1")>, iterator.next()<(wideDelta.(type))>);
        Assert.assertTrue(iterator.hasNext());
        Assert.assertEquals(<(wideLiteral.(type))("2")>, iterator.next()<(wideDelta.(type))>);
        Assert.assertTrue(iterator.hasNext());
        Assert.assertEquals(<(wideLiteral.(type))("3")>, iterator.next()<(wideDelta.(type))>);
        Assert.assertTrue(iterator.hasNext());
        Assert.assertEquals(<(wideLiteral.(type))("4")>, iterator.next()<(wideDelta.(type))>);
        Assert.assertTrue(iterator.hasNext());
        Assert.assertEquals(<(wideLiteral.(type))("5")>, iterator.next()<(wideDelta.(type))>);
        Assert.assertFalse(iterator.hasNext());
        Assert.assertEquals(<(wideLiteral.(type))("1")>, stack.<type>Iterator().next()<(wideDelta.(type))>);
    }

    @Test(expected = NoSuchElementException.class)
    public void iterator_throws()
    {
        <name>Iterator iterator = this.stack.<type>Iterator();
        while (iterator.hasNext())
        {
            iterator.next();
        }

        iterator.next();
    }

    @Test(expected = NoSuchElementException.class)
    public void iterator_throws_non_empty_stack()
    {
        <name>ArrayStack modifiableStack = new <name>ArrayStack();
        Mutable<name>Stack unmodifiableStack = new Unmodifiable<name>Stack(modifiableStack);
        modifiableStack.push(<(literal.(type))("1")>);
        modifiableStack.push(<(literal.(type))("2")>);
        modifiableStack.push(<(literal.(type))("3")>);
        <name>Iterator iterator = unmodifiableStack.<type>Iterator();
        while (iterator.hasNext())
        {
            iterator.next();
        }
        iterator.next();
    }

    @Test
    public void forEach()
    {
        final <wideType.(type)>[] sum = new <wideType.(type)>[1];
        this.stack.forEach(new <name>Procedure()
        {
            public void value(<type> each)
            {
                sum[0] += each;
            }
        });

        Assert.assertEquals(<(wideLiteral.(type))("6")>, sum[0]<(wideDelta.(type))>);
    }

    @Test
    public void size()
    {
        Verify.assertSize(0, new Unmodifiable<name>Stack(new <name>ArrayStack()));
        Verify.assertSize(3, this.stack);
    }

    @Test
    public void count()
    {
        Assert.assertEquals(2L, new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["1", "0", "2"]:(literal.(type))(); separator=", ">)).count(<name>Predicates.greaterThan(<zero.(type)>)));
    }

    @Test
    public void anySatisfy()
    {
        Assert.assertTrue(new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["1", "-1", "2"]:(literal.(type))(); separator=", ">)).anySatisfy(<name>Predicates.greaterThan(<(literal.(type))("0")>)));
        Assert.assertFalse(new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["1", "-1", "2"]:(literal.(type))(); separator=", ">)).anySatisfy(<name>Predicates.equal(<(literal.(type))("0")>)));
    }

    @Test
    public void allSatisfy()
    {
        Assert.assertFalse(new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["1", "0", "2"]:(literal.(type))(); separator=", ">)).allSatisfy(<name>Predicates.greaterThan(<(literal.(type))("0")>)));
        Assert.assertTrue(new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">)).allSatisfy(<name>Predicates.greaterThan(<(literal.(type))("0")>)));
    }

    @Test
    public void noneSatisfy()
    {
        Assert.assertFalse(new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["1", "0", "2"]:(literal.(type))(); separator=", ">)).noneSatisfy(<name>Predicates.greaterThan(<(literal.(type))("0")>)));
        Assert.assertTrue(new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">)).noneSatisfy(<name>Predicates.greaterThan(<(literal.(type))("3")>)));
    }
    
    @Test
    public void collect()
    {
        Assert.assertEquals(ArrayStack.newStackWith(<["0", "1", "2"]:(literal.(type))(); separator=", ">), this.stack.collect(new <name>ToObjectFunction\<<wrapperName>\>()
        {
            public <wrapperName> valueOf(<type> parameter)
            {
                return <(castIntToNarrowType.(type))("parameter - 1")>;
            }
        }));
    }

    @Test
    public void select()
    {
        
        Verify.assertSize(3, this.stack.select(<name>Predicates.lessThan(<(literal.(type))("4")>)));
        Verify.assertSize(2, this.stack.select(<name>Predicates.lessThan(<(literal.(type))("3")>)));
    }

    @Test
    public void reject()
    {
        
        Verify.assertSize(0, this.stack.reject(<name>Predicates.lessThan(<(literal.(type))("4")>)));
        Verify.assertSize(1, this.stack.reject(<name>Predicates.lessThan(<(literal.(type))("3")>)));
    }

    @Test
    public void detectIfNone()
    {
        
        Assert.assertEquals(<(wideLiteral.(type))("3")>, this.stack.detectIfNone(<name>Predicates.lessThan(<(literal.(type))("4")>), <(literal.(type))("0")>)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("0")>, this.stack.detectIfNone(<name>Predicates.greaterThan(<(literal.(type))("3")>), <(literal.(type))("0")>)<(wideDelta.(type))>);
    }

    @Test
    public void max()
    {
        Assert.assertEquals(<(wideLiteral.(type))("9")>, new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["1", "0", "9", "7"]:(literal.(type))(); separator=", ">)).max()<(wideDelta.(type))>);
    }

    @Test(expected = NoSuchElementException.class)
    public void max_throws_emptyList()
    {
        new Unmodifiable<name>Stack(new <name>ArrayStack()).max();
    }

    @Test
    public void min()
    {
        Assert.assertEquals(<(wideLiteral.(type))("0")>, new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["1", "0", "9", "7"]:(literal.(type))(); separator=", ">)).min()<(wideDelta.(type))>);
    }

    @Test(expected = NoSuchElementException.class)
    public void min_throws_emptyList()
    {
        new Unmodifiable<name>Stack(new <name>ArrayStack()).min();
    }

    @Test
    public void minIfEmpty()
    {
        Assert.assertEquals(<(wideLiteral.(type))("5")>, new Unmodifiable<name>Stack(new <name>ArrayStack()).minIfEmpty(<(literal.(type))("5")>)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("0")>, new Unmodifiable<name>Stack(new <name>ArrayStack()).minIfEmpty(<(literal.(type))("0")>)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("0")>, new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["1", "0", "9", "7"]:(literal.(type))(); separator=", ">)).minIfEmpty(<(literal.(type))("5")>)<(wideDelta.(type))>);
    }

    @Test
    public void maxIfEmpty()
    {
        Assert.assertEquals(<(wideLiteral.(type))("5")>, new Unmodifiable<name>Stack(new <name>ArrayStack()).maxIfEmpty(<(literal.(type))("5")>)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("0")>, new Unmodifiable<name>Stack(new <name>ArrayStack()).maxIfEmpty(<(literal.(type))("0")>)<(wideDelta.(type))>);
        Assert.assertEquals(<(wideLiteral.(type))("9")>, new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["1", "0", "9", "7"]:(literal.(type))(); separator=", ">)).maxIfEmpty(<(literal.(type))("5")>)<(wideDelta.(type))>);
    }

    @Test
    public void sum()
    {
        Assert.assertEquals(<(wideLiteral.(type))("10")>, new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">)).sum()<(wideDelta.(type))>);
    }

    @Test
    public void average()
    {
        Assert.assertEquals(2.5, new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">)).average(), 0.0);
    }

    @Test(expected = ArithmeticException.class)
    public void averageThrowsOnEmpty()
    {
        new Unmodifiable<name>Stack(new <name>ArrayStack()).average();
    }

    @Test
    public void median()
    {
        Assert.assertEquals(2.5, new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">)).median(), 0.0);
        Assert.assertEquals(3.0, new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["1", "2", "3", "4", "5"]:(literal.(type))(); separator=", ">)).median(), 0.0);
    }

    @Test(expected = ArithmeticException.class)
    public void medianThrowsOnEmpty()
    {
        new Unmodifiable<name>Stack(new <name>ArrayStack()).median();
    }

    @Test
    public void toArray()
    {
        Assert.assertEquals(3L, this.stack.toArray().length);
        Assert.assertArrayEquals(new <type>[]{<["3", "2", "1"]:(literal.(type))(); separator=", ">}, this.stack.toArray()<(delta.(type))>);
    }

    @Test
    public void toSortedArray()
    {
        Assert.assertArrayEquals(new <type>[]{<["1", "3", "7", "9"]:(literal.(type))(); separator=", ">},
                new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["3", "1", "9", "7"]:(literal.(type))(); separator=", ">)).toSortedArray()<(delta.(type))>);
    }

    @Test
    public void toSortedList()
    {
        Assert.assertEquals(<name>ArrayList.newListWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">), this.stack.toSortedList());
    }

    @Test
    public void testEquals()
    {
        Mutable<name>Stack stack1 = new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">));
        Mutable<name>Stack stack2 = new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["1", "2", "3", "4"]:(literal.(type))(); separator=", ">));
        Mutable<name>Stack stack3 = new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["5", "6", "7", "8"]:(literal.(type))(); separator=", ">));
        Mutable<name>Stack stack4 = new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["5", "6", "7"]:(literal.(type))(); separator=", ">));
        Mutable<name>Stack stack5 = new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["4", "3", "2", "1"]:(literal.(type))(); separator=", ">));

        Verify.assertEqualsAndHashCode(stack1, stack2);
        Verify.assertPostSerializedEqualsAndHashCode(stack1);
        Assert.assertNotEquals(stack1, stack3);
        Assert.assertNotEquals(stack1, stack4);
        Assert.assertNotEquals(stack1, stack5);
    }

    @Test
    public void testHashCode()
    {
        Assert.assertEquals(ArrayStack.newStackWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">).hashCode(),
                new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">)).hashCode());
        Assert.assertEquals(ArrayStack.newStack().hashCode(), new Unmodifiable<name>Stack(new <name>ArrayStack()).hashCode());
    }

    @Test
    public void testToString()
    {
        Assert.assertEquals("[]", new Unmodifiable<name>Stack(new <name>ArrayStack()).toString());
        Assert.assertEquals("[<(toStringLiteral.(type))("1")>]", new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<(literal.(type))("1")>)).toString());
        Mutable<name>Stack stack1 = new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["1", "2"]:(literal.(type))(); separator=", ">));
        Assert.assertEquals("[<["2", "1"]:(toStringLiteral.(type))(); separator=", ">]", stack1.toString());
        Assert.assertEquals("[<["3", "2", "1"]:(toStringLiteral.(type))(); separator=", ">]", this.stack.toString());
    }

    @Test
    public void makeString()
    {
        
        Assert.assertEquals("<(toStringLiteral.(type))("1")>", new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<(literal.(type))("1")>)).makeString("/"));
        Assert.assertEquals(this.stack.toString(), this.stack.makeString("[", ", ", "]"));
        Assert.assertEquals("", new Unmodifiable<name>Stack(new <name>ArrayStack()).makeString());
        Mutable<name>Stack stack1 = new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["1", "2"]:(literal.(type))(); separator=", ">));
        Assert.assertEquals("<["2", "1"]:(toStringLiteral.(type))(); separator=", ">", stack1.makeString());
        Assert.assertEquals("<["2", "1"]:(toStringLiteral.(type))(); separator="/">", stack1.makeString("/"));
        Assert.assertEquals("[<["2", "1"]:(toStringLiteral.(type))(); separator="/">]", stack1.makeString("[", "/", "]"));
        Assert.assertEquals("<["3", "2", "1"]:(toStringLiteral.(type))(); separator=", ">", this.stack.makeString());
        Assert.assertEquals("<["3", "2", "1"]:(toStringLiteral.(type))(); separator="/">", this.stack.makeString("/"));
    }

    @Test
    public void appendString()
    {
        StringBuilder appendable = new StringBuilder();
        new Unmodifiable<name>Stack(new <name>ArrayStack()).appendString(appendable);
        Assert.assertEquals("", appendable.toString());
        StringBuilder appendable1 = new StringBuilder();
        new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<(literal.(type))("1")>)).appendString(appendable1);
        Assert.assertEquals("<(toStringLiteral.(type))("1")>", appendable1.toString());
        StringBuilder appendable2 = new StringBuilder();
        Mutable<name>Stack stack1 = new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["1", "2"]:(literal.(type))(); separator=", ">));
        stack1.appendString(appendable2);
        Assert.assertEquals("<["2", "1"]:(toStringLiteral.(type))(); separator=", ">", appendable2.toString());
        StringBuilder appendable3 = new StringBuilder();
        stack1.appendString(appendable3, "/");
        Assert.assertEquals("<["2", "1"]:(toStringLiteral.(type))(); separator="/">", appendable3.toString());
        StringBuilder appendable4 = new StringBuilder();
        stack1.appendString(appendable4, "[", ", ", "]");
        Assert.assertEquals(stack1.toString(), appendable4.toString());
        StringBuilder appendable5 = new StringBuilder();
        this.stack.appendString(appendable5, "/");
        Assert.assertEquals("<["3", "2", "1"]:(toStringLiteral.(type))(); separator="/">", appendable5.toString());
    }

    @Test
    public void toList()
    {
        Assert.assertEquals(<name>ArrayList.newListWith(<["3", "2", "1"]:(literal.(type))(); separator=", ">), this.stack.toList());

    }

    @Test
    public void toSet()
    {
        Assert.assertEquals(<name>HashSet.newSetWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">), this.stack.toSet());
    }

    @Test
    public void toBag()
    {
        Assert.assertEquals(<name>HashBag.newBagWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">), this.stack.toBag());
    }

    @Test
    public void asLazy()
    {
        
        Assert.assertEquals(this.stack.toList(), this.stack.asLazy().toList());
    }

    @Test
    public void asUnmodifiable()
    {
        Mutable<name>Stack stack1 = new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">));
        Assert.assertEquals(stack1, stack1.asUnmodifiable());
        Assert.assertSame(stack1, stack1.asUnmodifiable());
    }

    @Test
    public void asSynchronized()
    {
        Mutable<name>Stack stack1 = new Unmodifiable<name>Stack(<name>ArrayStack.newStackWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">));
        Verify.assertInstanceOf(Synchronized<name>Stack.class, stack1.asSynchronized());
    }
}

>>
